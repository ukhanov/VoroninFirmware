
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000115e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  0000115e  000011f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800096  00800096  00001228  2**0
                  ALLOC
  3 .noinit       00000001  008000b9  008000b9  00001228  2**0
                  ALLOC
  4 .debug_aranges 00000028  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000304  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ce9  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002da  00000000  00000000  0000223d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d7c  00000000  00000000  00002517  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00003294  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000345  00000000  00000000  00003424  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000645  00000000  00000000  00003769  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00003dae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
       4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      20:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__vector_8>
      24:	0c 94 2b 02 	jmp	0x456	; 0x456 <__vector_9>
      28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      2c:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_11>
      30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      34:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      38:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__vector_14>
      3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>

00000054 <__c.2560>:
      54:	0a 4d 65 73 73 61 67 65 20 69 73 20 74 6f 6f 20     .Message is too 
      64:	6c 6f 6e 67 0a 00                                   long..

0000006a <__c.2557>:
      6a:	0a 54 72 61 6e 73 6d 69 73 73 69 6f 6e 20 65 72     .Transmission er
      7a:	72 6f 72 0a 00                                      ror..

0000007f <__c.2553>:
      7f:	0a 54 6f 6f 20 6d 61 6e 79 20 73 74 72 61 79 20     .Too many stray 
      8f:	69 6e 74 65 72 72 75 70 74 73 2e 20 4d 65 73 73     interrupts. Mess
      9f:	61 67 65 20 69 73 20 6e 6f 74 20 72 65 61 64 0a     age is not read.
	...

000000b0 <__c.2441>:
      b0:	53 50 49 4e 55 37 30 00                             SPINU70.

000000b8 <__ctors_end>:
      b8:	11 24       	eor	r1, r1
      ba:	1f be       	out	0x3f, r1	; 63
      bc:	cf e5       	ldi	r28, 0x5F	; 95
      be:	d4 e0       	ldi	r29, 0x04	; 4
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <handle_mcucsr>:
 */
void handle_mcucsr(void)
  __attribute__((section(".init3")))
  __attribute__((naked));
void handle_mcucsr(void)
{
      c4:	84 b7       	in	r24, 0x34	; 52
      c6:	80 93 b9 00 	sts	0x00B9, r24
  mcucsr = MCUCSR;
  MCUCSR = 0;
      ca:	14 be       	out	0x34, r1	; 52

000000cc <__do_copy_data>:
      cc:	10 e0       	ldi	r17, 0x00	; 0
      ce:	a0 e6       	ldi	r26, 0x60	; 96
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	ee e5       	ldi	r30, 0x5E	; 94
      d4:	f1 e1       	ldi	r31, 0x11	; 17
      d6:	02 c0       	rjmp	.+4      	; 0xdc <.do_copy_data_start>

000000d8 <.do_copy_data_loop>:
      d8:	05 90       	lpm	r0, Z+
      da:	0d 92       	st	X+, r0

000000dc <.do_copy_data_start>:
      dc:	a6 39       	cpi	r26, 0x96	; 150
      de:	b1 07       	cpc	r27, r17
      e0:	d9 f7       	brne	.-10     	; 0xd8 <.do_copy_data_loop>

000000e2 <__do_clear_bss>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a6 e9       	ldi	r26, 0x96	; 150
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	a9 3b       	cpi	r26, 0xB9	; 185
      ee:	b1 07       	cpc	r27, r17
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>
      f2:	0e 94 bd 07 	call	0xf7a	; 0xf7a <main>
      f6:	0c 94 ad 08 	jmp	0x115a	; 0x115a <_exit>

000000fa <__bad_interrupt>:
      fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <RELAY_ON>:
uint8_t IS_RELAY_ON(uint8_t Relay);

//---------------------------------------------------------------------------
void RELAY_ON(uint8_t Relay)
{
	if(((Relay)&0x10) && ((Relay)&0x20)) 	PORTD |= _BV(GET_PIN(Relay));
      fe:	48 2f       	mov	r20, r24
     100:	50 e0       	ldi	r21, 0x00	; 0
     102:	ca 01       	movw	r24, r20
     104:	80 71       	andi	r24, 0x10	; 16
     106:	90 70       	andi	r25, 0x00	; 0
     108:	44 ff       	sbrs	r20, 4
     10a:	0f c0       	rjmp	.+30     	; 0x12a <RELAY_ON+0x2c>
     10c:	45 ff       	sbrs	r20, 5
     10e:	0d c0       	rjmp	.+26     	; 0x12a <RELAY_ON+0x2c>
     110:	22 b3       	in	r18, 0x12	; 18
     112:	47 70       	andi	r20, 0x07	; 7
     114:	50 70       	andi	r21, 0x00	; 0
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	02 c0       	rjmp	.+4      	; 0x120 <RELAY_ON+0x22>
     11c:	88 0f       	add	r24, r24
     11e:	99 1f       	adc	r25, r25
     120:	4a 95       	dec	r20
     122:	e2 f7       	brpl	.-8      	; 0x11c <RELAY_ON+0x1e>
     124:	28 2b       	or	r18, r24
     126:	22 bb       	out	0x12, r18	; 18
     128:	08 95       	ret
	else 	if((Relay)&0x20) 				PORTC |= _BV(GET_PIN(Relay));
     12a:	45 ff       	sbrs	r20, 5
     12c:	0d c0       	rjmp	.+26     	; 0x148 <RELAY_ON+0x4a>
     12e:	25 b3       	in	r18, 0x15	; 21
     130:	47 70       	andi	r20, 0x07	; 7
     132:	50 70       	andi	r21, 0x00	; 0
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	02 c0       	rjmp	.+4      	; 0x13e <RELAY_ON+0x40>
     13a:	88 0f       	add	r24, r24
     13c:	99 1f       	adc	r25, r25
     13e:	4a 95       	dec	r20
     140:	e2 f7       	brpl	.-8      	; 0x13a <RELAY_ON+0x3c>
     142:	28 2b       	or	r18, r24
     144:	25 bb       	out	0x15, r18	; 21
     146:	08 95       	ret
     148:	47 70       	andi	r20, 0x07	; 7
     14a:	50 70       	andi	r21, 0x00	; 0
	else 	if((Relay)&0x10) 				PORTB |= _BV(GET_PIN(Relay));
     14c:	89 2b       	or	r24, r25
     14e:	59 f0       	breq	.+22     	; 0x166 <RELAY_ON+0x68>
     150:	28 b3       	in	r18, 0x18	; 24
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	02 c0       	rjmp	.+4      	; 0x15c <RELAY_ON+0x5e>
     158:	88 0f       	add	r24, r24
     15a:	99 1f       	adc	r25, r25
     15c:	4a 95       	dec	r20
     15e:	e2 f7       	brpl	.-8      	; 0x158 <RELAY_ON+0x5a>
     160:	28 2b       	or	r18, r24
     162:	28 bb       	out	0x18, r18	; 24
     164:	08 95       	ret
	else 									PORTA |= _BV(GET_PIN(Relay));
     166:	2b b3       	in	r18, 0x1b	; 27
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	02 c0       	rjmp	.+4      	; 0x172 <RELAY_ON+0x74>
     16e:	88 0f       	add	r24, r24
     170:	99 1f       	adc	r25, r25
     172:	4a 95       	dec	r20
     174:	e2 f7       	brpl	.-8      	; 0x16e <RELAY_ON+0x70>
     176:	28 2b       	or	r18, r24
     178:	2b bb       	out	0x1b, r18	; 27
     17a:	08 95       	ret

0000017c <RELAY_OFF>:
}
//---------------------------------------------------------------------------

void RELAY_OFF(uint8_t Relay)
{
	if(((Relay)&0x10) && ((Relay)&0x20))	PORTD &= ~(_BV(GET_PIN(Relay)));
     17c:	48 2f       	mov	r20, r24
     17e:	50 e0       	ldi	r21, 0x00	; 0
     180:	ca 01       	movw	r24, r20
     182:	80 71       	andi	r24, 0x10	; 16
     184:	90 70       	andi	r25, 0x00	; 0
     186:	44 ff       	sbrs	r20, 4
     188:	10 c0       	rjmp	.+32     	; 0x1aa <RELAY_OFF+0x2e>
     18a:	45 ff       	sbrs	r20, 5
     18c:	0e c0       	rjmp	.+28     	; 0x1aa <RELAY_OFF+0x2e>
     18e:	22 b3       	in	r18, 0x12	; 18
     190:	47 70       	andi	r20, 0x07	; 7
     192:	50 70       	andi	r21, 0x00	; 0
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	02 c0       	rjmp	.+4      	; 0x19e <RELAY_OFF+0x22>
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	4a 95       	dec	r20
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <RELAY_OFF+0x1e>
     1a2:	80 95       	com	r24
     1a4:	82 23       	and	r24, r18
     1a6:	82 bb       	out	0x12, r24	; 18
     1a8:	08 95       	ret
	else 	if((Relay)&0x20) 				PORTC &= ~(_BV(GET_PIN(Relay)));
     1aa:	45 ff       	sbrs	r20, 5
     1ac:	0e c0       	rjmp	.+28     	; 0x1ca <RELAY_OFF+0x4e>
     1ae:	25 b3       	in	r18, 0x15	; 21
     1b0:	47 70       	andi	r20, 0x07	; 7
     1b2:	50 70       	andi	r21, 0x00	; 0
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <RELAY_OFF+0x42>
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	4a 95       	dec	r20
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <RELAY_OFF+0x3e>
     1c2:	80 95       	com	r24
     1c4:	82 23       	and	r24, r18
     1c6:	85 bb       	out	0x15, r24	; 21
     1c8:	08 95       	ret
     1ca:	47 70       	andi	r20, 0x07	; 7
     1cc:	50 70       	andi	r21, 0x00	; 0
	else 	if((Relay)&0x10) 				PORTB &= ~(_BV(GET_PIN(Relay)));
     1ce:	89 2b       	or	r24, r25
     1d0:	61 f0       	breq	.+24     	; 0x1ea <RELAY_OFF+0x6e>
     1d2:	28 b3       	in	r18, 0x18	; 24
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	02 c0       	rjmp	.+4      	; 0x1de <RELAY_OFF+0x62>
     1da:	88 0f       	add	r24, r24
     1dc:	99 1f       	adc	r25, r25
     1de:	4a 95       	dec	r20
     1e0:	e2 f7       	brpl	.-8      	; 0x1da <RELAY_OFF+0x5e>
     1e2:	80 95       	com	r24
     1e4:	82 23       	and	r24, r18
     1e6:	88 bb       	out	0x18, r24	; 24
     1e8:	08 95       	ret
	else 									PORTA &= ~(_BV(GET_PIN(Relay)));
     1ea:	2b b3       	in	r18, 0x1b	; 27
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <RELAY_OFF+0x7a>
     1f2:	88 0f       	add	r24, r24
     1f4:	99 1f       	adc	r25, r25
     1f6:	4a 95       	dec	r20
     1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <RELAY_OFF+0x76>
     1fa:	80 95       	com	r24
     1fc:	82 23       	and	r24, r18
     1fe:	8b bb       	out	0x1b, r24	; 27
     200:	08 95       	ret

00000202 <IS_RELAY_ON>:

uint8_t IS_RELAY_ON(uint8_t Relay)
{
uint8_t r;

	if(((Relay)&0x10) && ((Relay)&0x20))	r = PIND;
     202:	28 2f       	mov	r18, r24
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	c9 01       	movw	r24, r18
     208:	80 71       	andi	r24, 0x10	; 16
     20a:	90 70       	andi	r25, 0x00	; 0
     20c:	24 ff       	sbrs	r18, 4
     20e:	04 c0       	rjmp	.+8      	; 0x218 <IS_RELAY_ON+0x16>
     210:	25 ff       	sbrs	r18, 5
     212:	02 c0       	rjmp	.+4      	; 0x218 <IS_RELAY_ON+0x16>
     214:	80 b3       	in	r24, 0x10	; 16
     216:	09 c0       	rjmp	.+18     	; 0x22a <IS_RELAY_ON+0x28>
	else 	if((Relay)&0x20) 				r = PINC;
     218:	25 ff       	sbrs	r18, 5
     21a:	02 c0       	rjmp	.+4      	; 0x220 <IS_RELAY_ON+0x1e>
     21c:	83 b3       	in	r24, 0x13	; 19
     21e:	05 c0       	rjmp	.+10     	; 0x22a <IS_RELAY_ON+0x28>
	else 	if((Relay)&0x10) 				r = PINB;
     220:	89 2b       	or	r24, r25
     222:	11 f0       	breq	.+4      	; 0x228 <IS_RELAY_ON+0x26>
     224:	86 b3       	in	r24, 0x16	; 22
     226:	01 c0       	rjmp	.+2      	; 0x22a <IS_RELAY_ON+0x28>
	else 									r = PINA;
     228:	89 b3       	in	r24, 0x19	; 25
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	27 70       	andi	r18, 0x07	; 7
     22e:	30 70       	andi	r19, 0x00	; 0
     230:	02 c0       	rjmp	.+4      	; 0x236 <IS_RELAY_ON+0x34>
     232:	95 95       	asr	r25
     234:	87 95       	ror	r24
     236:	2a 95       	dec	r18
     238:	e2 f7       	brpl	.-8      	; 0x232 <IS_RELAY_ON+0x30>
     23a:	80 95       	com	r24
	return (r & _BV(GET_PIN(Relay))) == 0 ? 1 : 0;
}
     23c:	81 70       	andi	r24, 0x01	; 1
     23e:	08 95       	ret

00000240 <Algorithm>:
#endif   // FILTER_ONLY
//---------------------------------------------------------------------------

void 
Algorithm()
{
     240:	1f 93       	push	r17
 */

uint16_t i;
	i = 0;

	TargetCurrent = IS_RELAY_ON(TargetActual);
     242:	80 91 b5 00 	lds	r24, 0x00B5
     246:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     24a:	80 93 9a 00 	sts	0x009A, r24
	if(TimerBeep == TIMER_FLAG) TimerBeep  = 0;  // Reset timer
     24e:	80 91 9d 00 	lds	r24, 0x009D
     252:	90 91 9e 00 	lds	r25, 0x009E
     256:	a0 91 9f 00 	lds	r26, 0x009F
     25a:	b0 91 a0 00 	lds	r27, 0x00A0
     25e:	8f 5f       	subi	r24, 0xFF	; 255
     260:	9f 4f       	sbci	r25, 0xFF	; 255
     262:	af 4f       	sbci	r26, 0xFF	; 255
     264:	bf 4f       	sbci	r27, 0xFF	; 255
     266:	41 f4       	brne	.+16     	; 0x278 <Algorithm+0x38>
     268:	10 92 9d 00 	sts	0x009D, r1
     26c:	10 92 9e 00 	sts	0x009E, r1
     270:	10 92 9f 00 	sts	0x009F, r1
     274:	10 92 a0 00 	sts	0x00A0, r1
	
	if(IS_RELAY_ON(ManualAuto)) { // we are in manual mode
     278:	80 91 9b 00 	lds	r24, 0x009B
     27c:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     280:	88 23       	and	r24, r24
     282:	51 f1       	breq	.+84     	; 0x2d8 <Algorithm+0x98>
		TargetRequested = TargetCurrent;
     284:	80 91 9a 00 	lds	r24, 0x009A
     288:	80 93 b7 00 	sts	0x00B7, r24
		Urequested = Uadc;
     28c:	80 91 a8 00 	lds	r24, 0x00A8
     290:	90 91 a9 00 	lds	r25, 0x00A9
     294:	90 93 a5 00 	sts	0x00A5, r25
     298:	80 93 a4 00 	sts	0x00A4, r24
		FilterCurrent = GET_CURRENT_FILTER;
     29c:	80 91 a1 00 	lds	r24, 0x00A1
     2a0:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     2a4:	18 2f       	mov	r17, r24
     2a6:	80 91 b3 00 	lds	r24, 0x00B3
     2aa:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     2ae:	88 0f       	add	r24, r24
     2b0:	81 0f       	add	r24, r17
     2b2:	80 93 b6 00 	sts	0x00B6, r24
		if(FilterCurrent < 3 )
     2b6:	83 30       	cpi	r24, 0x03	; 3
     2b8:	18 f4       	brcc	.+6      	; 0x2c0 <Algorithm+0x80>
		{
			FilterRequested = FilterCurrent-1;
     2ba:	81 50       	subi	r24, 0x01	; 1
     2bc:	80 93 b2 00 	sts	0x00B2, r24
		}
		ItWasManual = 1;
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	80 93 9c 00 	sts	0x009C, r24
		RELAY_OFF(TargetRelayUp);
     2c6:	80 91 b1 00 	lds	r24, 0x00B1
     2ca:	0e 94 be 00 	call	0x17c	; 0x17c <RELAY_OFF>
		RELAY_OFF(TargetRelayDown);
     2ce:	80 91 a3 00 	lds	r24, 0x00A3
     2d2:	0e 94 be 00 	call	0x17c	; 0x17c <RELAY_OFF>
     2d6:	84 c0       	rjmp	.+264    	; 0x3e0 <Algorithm+0x1a0>
		RELAY_OFF(FilterRelayIn);
		RELAY_OFF(FilterRelayOut);
		return; // Do nothing 
	}
	
	if(ItWasManual)
     2d8:	80 91 9c 00 	lds	r24, 0x009C
     2dc:	88 23       	and	r24, r24
     2de:	d1 f0       	breq	.+52     	; 0x314 <Algorithm+0xd4>
	{
#if !defined(FILTER_ONLY)
		TargetCare();
#endif
		ItWasManual = 0;
     2e0:	10 92 9c 00 	sts	0x009C, r1
		TargetCurrent = IS_RELAY_ON(TargetActual);
     2e4:	80 91 b5 00 	lds	r24, 0x00B5
     2e8:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     2ec:	80 93 9a 00 	sts	0x009A, r24
		FilterCurrent = GET_CURRENT_FILTER;
     2f0:	80 91 a1 00 	lds	r24, 0x00A1
     2f4:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     2f8:	18 2f       	mov	r17, r24
     2fa:	80 91 b3 00 	lds	r24, 0x00B3
     2fe:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     302:	88 0f       	add	r24, r24
     304:	81 0f       	add	r24, r17
     306:	80 93 b6 00 	sts	0x00B6, r24
		if(FilterCurrent < 3 )
     30a:	83 30       	cpi	r24, 0x03	; 3
     30c:	18 f4       	brcc	.+6      	; 0x314 <Algorithm+0xd4>
		{
			FilterRequested = FilterCurrent-1;
     30e:	81 50       	subi	r24, 0x01	; 1
     310:	80 93 b2 00 	sts	0x00B2, r24
			IsFlashing = 0;
		}
	}
#endif   // FILTER_ONLY	
// Filter ON / OFF handling
	FilterCurrent = GET_CURRENT_FILTER;
     314:	80 91 a1 00 	lds	r24, 0x00A1
     318:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     31c:	18 2f       	mov	r17, r24
     31e:	80 91 b3 00 	lds	r24, 0x00B3
     322:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     326:	28 2f       	mov	r18, r24
     328:	22 0f       	add	r18, r18
     32a:	21 0f       	add	r18, r17
     32c:	20 93 b6 00 	sts	0x00B6, r18
	if(FilterCurrent > 2 )
     330:	23 30       	cpi	r18, 0x03	; 3
     332:	10 f1       	brcs	.+68     	; 0x378 <Algorithm+0x138>
	{
		SET_TIMER(TimerBeep, ONE_SECOND); // Beep the error
     334:	80 91 9d 00 	lds	r24, 0x009D
     338:	90 91 9e 00 	lds	r25, 0x009E
     33c:	a0 91 9f 00 	lds	r26, 0x009F
     340:	b0 91 a0 00 	lds	r27, 0x00A0
     344:	00 97       	sbiw	r24, 0x00	; 0
     346:	a1 05       	cpc	r26, r1
     348:	b1 05       	cpc	r27, r1
     34a:	09 f0       	breq	.+2      	; 0x34e <Algorithm+0x10e>
     34c:	51 c0       	rjmp	.+162    	; 0x3f0 <Algorithm+0x1b0>
     34e:	80 91 ad 00 	lds	r24, 0x00AD
     352:	90 91 ae 00 	lds	r25, 0x00AE
     356:	a0 91 af 00 	lds	r26, 0x00AF
     35a:	b0 91 b0 00 	lds	r27, 0x00B0
     35e:	80 53       	subi	r24, 0x30	; 48
     360:	9f 4d       	sbci	r25, 0xDF	; 223
     362:	af 4f       	sbci	r26, 0xFF	; 255
     364:	bf 4f       	sbci	r27, 0xFF	; 255
     366:	80 93 9d 00 	sts	0x009D, r24
     36a:	90 93 9e 00 	sts	0x009E, r25
     36e:	a0 93 9f 00 	sts	0x009F, r26
     372:	b0 93 a0 00 	sts	0x00A0, r27
     376:	3c c0       	rjmp	.+120    	; 0x3f0 <Algorithm+0x1b0>
		return;
	}
	
	if(FilterCurrent != (FilterRequested+1)) {
     378:	40 91 b2 00 	lds	r20, 0x00B2
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	84 2f       	mov	r24, r20
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	28 17       	cp	r18, r24
     386:	39 07       	cpc	r19, r25
     388:	59 f1       	breq	.+86     	; 0x3e0 <Algorithm+0x1a0>
		if(FilterRequested == 0) {
     38a:	44 23       	and	r20, r20
     38c:	99 f4       	brne	.+38     	; 0x3b4 <Algorithm+0x174>
			RELAY_OFF(FilterRelayIn);
     38e:	80 91 aa 00 	lds	r24, 0x00AA
     392:	0e 94 be 00 	call	0x17c	; 0x17c <RELAY_OFF>
			if(IS_RELAY_ON(FilterLimitOut)) {
     396:	80 91 a1 00 	lds	r24, 0x00A1
     39a:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     39e:	88 23       	and	r24, r24
     3a0:	29 f0       	breq	.+10     	; 0x3ac <Algorithm+0x16c>
				RELAY_OFF(FilterRelayOut);
     3a2:	80 91 99 00 	lds	r24, 0x0099
     3a6:	0e 94 be 00 	call	0x17c	; 0x17c <RELAY_OFF>
     3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <Algorithm+0x174>
			} else {
				RELAY_ON(FilterRelayOut);
     3ac:	80 91 99 00 	lds	r24, 0x0099
     3b0:	0e 94 7f 00 	call	0xfe	; 0xfe <RELAY_ON>
			}
		}
		if(FilterRequested == 1) {
     3b4:	80 91 b2 00 	lds	r24, 0x00B2
     3b8:	81 30       	cpi	r24, 0x01	; 1
     3ba:	d1 f4       	brne	.+52     	; 0x3f0 <Algorithm+0x1b0>
			RELAY_OFF(FilterRelayOut);
     3bc:	80 91 99 00 	lds	r24, 0x0099
     3c0:	0e 94 be 00 	call	0x17c	; 0x17c <RELAY_OFF>
			if(IS_RELAY_ON(FilterLimitIn)) {
     3c4:	80 91 b3 00 	lds	r24, 0x00B3
     3c8:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     3cc:	88 23       	and	r24, r24
     3ce:	19 f0       	breq	.+6      	; 0x3d6 <Algorithm+0x196>
				RELAY_OFF(FilterRelayIn);
     3d0:	80 91 aa 00 	lds	r24, 0x00AA
     3d4:	0b c0       	rjmp	.+22     	; 0x3ec <Algorithm+0x1ac>
			} else {
				RELAY_ON(FilterRelayIn);
     3d6:	80 91 aa 00 	lds	r24, 0x00AA
     3da:	0e 94 7f 00 	call	0xfe	; 0xfe <RELAY_ON>
     3de:	08 c0       	rjmp	.+16     	; 0x3f0 <Algorithm+0x1b0>
			}
		}
	}
	else
	{
				RELAY_OFF(FilterRelayIn);
     3e0:	80 91 aa 00 	lds	r24, 0x00AA
     3e4:	0e 94 be 00 	call	0x17c	; 0x17c <RELAY_OFF>
				RELAY_OFF(FilterRelayOut);
     3e8:	80 91 99 00 	lds	r24, 0x0099
     3ec:	0e 94 be 00 	call	0x17c	; 0x17c <RELAY_OFF>
	}
}
     3f0:	1f 91       	pop	r17
     3f2:	08 95       	ret

000003f4 <uchar2h>:

char* uchar2h(uint8_t i)
{
   static char buf[3];
   const char code[16]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
   buf[1] = code[i&0xf];
     3f4:	98 2f       	mov	r25, r24
     3f6:	9f 70       	andi	r25, 0x0F	; 15
     3f8:	a6 e8       	ldi	r26, 0x86	; 134
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	fd 01       	movw	r30, r26
     3fe:	e9 0f       	add	r30, r25
     400:	f1 1d       	adc	r31, r1
     402:	90 81       	ld	r25, Z
     404:	90 93 97 00 	sts	0x0097, r25
   buf[0] = code[i>>4];
     408:	e7 e9       	ldi	r30, 0x97	; 151
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	82 95       	swap	r24
     40e:	8f 70       	andi	r24, 0x0F	; 15
     410:	a8 0f       	add	r26, r24
     412:	b1 1d       	adc	r27, r1
     414:	8c 91       	ld	r24, X
     416:	82 93       	st	-Z, r24
   buf[2] = 0;
     418:	10 92 98 00 	sts	0x0098, r1
   return buf;
}
     41c:	cf 01       	movw	r24, r30
     41e:	08 95       	ret

00000420 <h2uchar>:
//---------------------------------------------------------------------------

uint8_t h2uchar(char *buf)
{
     420:	fc 01       	movw	r30, r24
   uint8_t r1,r2;
   r1 = (buf[0]>='a'? buf[0]-('a'-'A'): buf[0]) -'0'; // to upper case
     422:	80 81       	ld	r24, Z
     424:	81 36       	cpi	r24, 0x61	; 97
     426:	1c f0       	brlt	.+6      	; 0x42e <h2uchar+0xe>
     428:	28 2f       	mov	r18, r24
     42a:	20 55       	subi	r18, 0x50	; 80
     42c:	02 c0       	rjmp	.+4      	; 0x432 <h2uchar+0x12>
     42e:	28 2f       	mov	r18, r24
     430:	20 53       	subi	r18, 0x30	; 48
   r1 = r1>9 ? r1-('A'-'0')+10 : r1;
     432:	2a 30       	cpi	r18, 0x0A	; 10
     434:	08 f0       	brcs	.+2      	; 0x438 <h2uchar+0x18>
     436:	27 50       	subi	r18, 0x07	; 7
   r2 = (buf[1]>='a'? buf[1]-('a'-'A'): buf[1]) -'0'; // to upper case
     438:	81 81       	ldd	r24, Z+1	; 0x01
     43a:	81 36       	cpi	r24, 0x61	; 97
     43c:	14 f0       	brlt	.+4      	; 0x442 <h2uchar+0x22>
     43e:	80 55       	subi	r24, 0x50	; 80
     440:	01 c0       	rjmp	.+2      	; 0x444 <h2uchar+0x24>
     442:	80 53       	subi	r24, 0x30	; 48
   r2 = r2>9 ? r2-('A'-'0')+10 : r2;
     444:	8a 30       	cpi	r24, 0x0A	; 10
     446:	08 f0       	brcs	.+2      	; 0x44a <h2uchar+0x2a>
     448:	87 50       	subi	r24, 0x07	; 7
     44a:	22 95       	swap	r18
     44c:	20 7f       	andi	r18, 0xF0	; 240
     44e:	28 2b       	or	r18, r24
   return (r2 | (r1<<4)) -'0';
}
     450:	82 2f       	mov	r24, r18
     452:	80 53       	subi	r24, 0x30	; 48
     454:	08 95       	ret

00000456 <__vector_9>:
//---------------------------------------------------------------------------

/* Part 3: Interrupt service routines */

ISR(TIMER0_OVF_vect)
{
     456:	1f 92       	push	r1
     458:	0f 92       	push	r0
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	0f 92       	push	r0
     45e:	11 24       	eor	r1, r1
     460:	2f 93       	push	r18
     462:	8f 93       	push	r24
     464:	9f 93       	push	r25
     466:	af 93       	push	r26
     468:	bf 93       	push	r27
static uint16_t scaler = 1;

	if (--scaler == 0)
     46a:	80 91 84 00 	lds	r24, 0x0084
     46e:	90 91 85 00 	lds	r25, 0x0085
     472:	01 97       	sbiw	r24, 0x01	; 1
     474:	90 93 85 00 	sts	0x0085, r25
     478:	80 93 84 00 	sts	0x0084, r24
     47c:	89 2b       	or	r24, r25
     47e:	d1 f4       	brne	.+52     	; 0x4b4 <__stack+0x55>
	{
		scaler = 10;
     480:	8a e0       	ldi	r24, 0x0A	; 10
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	90 93 85 00 	sts	0x0085, r25
     488:	80 93 84 00 	sts	0x0084, r24
		if(TimerBeep && TimerBeep != TIMER_FLAG)  BEEPER_PORT ^= _BV(BEEPER_PIN);
     48c:	80 91 9d 00 	lds	r24, 0x009D
     490:	90 91 9e 00 	lds	r25, 0x009E
     494:	a0 91 9f 00 	lds	r26, 0x009F
     498:	b0 91 a0 00 	lds	r27, 0x00A0
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	a1 09       	sbc	r26, r1
     4a0:	b1 09       	sbc	r27, r1
     4a2:	8e 5f       	subi	r24, 0xFE	; 254
     4a4:	9f 4f       	sbci	r25, 0xFF	; 255
     4a6:	af 4f       	sbci	r26, 0xFF	; 255
     4a8:	bf 4f       	sbci	r27, 0xFF	; 255
     4aa:	20 f4       	brcc	.+8      	; 0x4b4 <__stack+0x55>
     4ac:	85 b3       	in	r24, 0x15	; 21
     4ae:	90 e2       	ldi	r25, 0x20	; 32
     4b0:	89 27       	eor	r24, r25
     4b2:	85 bb       	out	0x15, r24	; 21
	}
}
     4b4:	bf 91       	pop	r27
     4b6:	af 91       	pop	r26
     4b8:	9f 91       	pop	r25
     4ba:	8f 91       	pop	r24
     4bc:	2f 91       	pop	r18
     4be:	0f 90       	pop	r0
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	0f 90       	pop	r0
     4c4:	1f 90       	pop	r1
     4c6:	18 95       	reti

000004c8 <__vector_8>:
//---------------------------------------------------------------------------

ISR(TIMER1_OVF_vect)
{
     4c8:	1f 92       	push	r1
     4ca:	0f 92       	push	r0
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	0f 92       	push	r0
     4d0:	11 24       	eor	r1, r1
     4d2:	8f 93       	push	r24
     4d4:	9f 93       	push	r25
     4d6:	af 93       	push	r26
     4d8:	bf 93       	push	r27
static uint16_t scaler = 1;

//	if(TimerBeep && TimerBeep != TIMER_FLAG)  BEEPER_PORT ^= _BV(BEEPER_PIN);
	if (--scaler == 0)
     4da:	80 91 82 00 	lds	r24, 0x0082
     4de:	90 91 83 00 	lds	r25, 0x0083
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	90 93 83 00 	sts	0x0083, r25
     4e8:	80 93 82 00 	sts	0x0082, r24
     4ec:	89 2b       	or	r24, r25
     4ee:	59 f4       	brne	.+22     	; 0x506 <__vector_8+0x3e>
	{
		scaler = SYS_CLOCK;
     4f0:	86 e4       	ldi	r24, 0x46	; 70
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	90 93 83 00 	sts	0x0083, r25
     4f8:	80 93 82 00 	sts	0x0082, r24
		intflags.tmr_int = 1;
     4fc:	80 91 b8 00 	lds	r24, 0x00B8
     500:	81 60       	ori	r24, 0x01	; 1
     502:	80 93 b8 00 	sts	0x00B8, r24
	}
	systime++;
     506:	80 91 ad 00 	lds	r24, 0x00AD
     50a:	90 91 ae 00 	lds	r25, 0x00AE
     50e:	a0 91 af 00 	lds	r26, 0x00AF
     512:	b0 91 b0 00 	lds	r27, 0x00B0
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	a1 1d       	adc	r26, r1
     51a:	b1 1d       	adc	r27, r1
     51c:	80 93 ad 00 	sts	0x00AD, r24
     520:	90 93 ae 00 	sts	0x00AE, r25
     524:	a0 93 af 00 	sts	0x00AF, r26
     528:	b0 93 b0 00 	sts	0x00B0, r27
}
     52c:	bf 91       	pop	r27
     52e:	af 91       	pop	r26
     530:	9f 91       	pop	r25
     532:	8f 91       	pop	r24
     534:	0f 90       	pop	r0
     536:	0f be       	out	0x3f, r0	; 63
     538:	0f 90       	pop	r0
     53a:	1f 90       	pop	r1
     53c:	18 95       	reti

0000053e <__vector_14>:
/*
 * ADC conversion complete.  Fetch the 10-bit value, and feed the
 * PWM with it.
 */
ISR(ADC_vect)
{
     53e:	1f 92       	push	r1
     540:	0f 92       	push	r0
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	0f 92       	push	r0
     546:	11 24       	eor	r1, r1
     548:	8f 93       	push	r24
     54a:	9f 93       	push	r25
  Uadc = ADCW;
     54c:	84 b1       	in	r24, 0x04	; 4
     54e:	95 b1       	in	r25, 0x05	; 5
     550:	90 93 a9 00 	sts	0x00A9, r25
     554:	80 93 a8 00 	sts	0x00A8, r24
  ADCSRA &= ~_BV(ADIE);		/* disable ADC interrupt */
     558:	33 98       	cbi	0x06, 3	; 6
  intflags.adc_int = 1;
     55a:	80 91 b8 00 	lds	r24, 0x00B8
     55e:	82 60       	ori	r24, 0x02	; 2
     560:	80 93 b8 00 	sts	0x00B8, r24
}
     564:	9f 91       	pop	r25
     566:	8f 91       	pop	r24
     568:	0f 90       	pop	r0
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	0f 90       	pop	r0
     56e:	1f 90       	pop	r1
     570:	18 95       	reti

00000572 <__vector_11>:
 * UART receive interrupt.  Fetch the character received and buffer
 * it, unless there was a framing error.  Note that the main loop
 * checks the received character only once per 10 ms.
 */
ISR(USART_RXC_vect)
{
     572:	1f 92       	push	r1
     574:	0f 92       	push	r0
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	0f 92       	push	r0
     57a:	11 24       	eor	r1, r1
     57c:	8f 93       	push	r24
  uint8_t c;

  c = UDR;
     57e:	8c b1       	in	r24, 0x0c	; 12
  if (bit_is_clear(UCSRA, FE))
     580:	5c 99       	sbic	0x0b, 4	; 11
     582:	07 c0       	rjmp	.+14     	; 0x592 <__vector_11+0x20>
    {
      rxbuff = c;
     584:	80 93 ab 00 	sts	0x00AB, r24
      intflags.rx_int = 1;
     588:	80 91 b8 00 	lds	r24, 0x00B8
     58c:	84 60       	ori	r24, 0x04	; 4
     58e:	80 93 b8 00 	sts	0x00B8, r24
    }
}
     592:	8f 91       	pop	r24
     594:	0f 90       	pop	r0
     596:	0f be       	out	0x3f, r0	; 63
     598:	0f 90       	pop	r0
     59a:	1f 90       	pop	r1
     59c:	18 95       	reti

0000059e <putchr>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     59e:	5d 9b       	sbis	0x0b, 5	; 11
     5a0:	fe cf       	rjmp	.-4      	; 0x59e <putchr>
	UDR = c;
     5a2:	8c b9       	out	0x0c, r24	; 12
}
     5a4:	08 95       	ret

000005a6 <write_binary>:

/*
 * Send the fixed length buffer down the UART Tx.
 */
void write_binary(const char *s, uint8_t len)
{
     5a6:	fc 01       	movw	r30, r24
     5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <write_binary+0x10>
  while (len--)  putchr(*s++);
     5aa:	80 81       	ld	r24, Z
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     5ac:	5d 9b       	sbis	0x0b, 5	; 11
     5ae:	fe cf       	rjmp	.-4      	; 0x5ac <write_binary+0x6>
/*
 * Send the fixed length buffer down the UART Tx.
 */
void write_binary(const char *s, uint8_t len)
{
  while (len--)  putchr(*s++);
     5b0:	31 96       	adiw	r30, 0x01	; 1
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
	UDR = c;
     5b2:	8c b9       	out	0x0c, r24	; 12
     5b4:	61 50       	subi	r22, 0x01	; 1
/*
 * Send the fixed length buffer down the UART Tx.
 */
void write_binary(const char *s, uint8_t len)
{
  while (len--)  putchr(*s++);
     5b6:	66 23       	and	r22, r22
     5b8:	c1 f7       	brne	.-16     	; 0x5aa <write_binary+0x4>
}
     5ba:	08 95       	ret

000005bc <printstr>:
/*
 * Send a C (NUL-terminated) string down the UART Tx.
 */

void printstr(const char *s)
{
     5bc:	fc 01       	movw	r30, r24
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
	UDR = c;
     5be:	9d e0       	ldi	r25, 0x0D	; 13
     5c0:	09 c0       	rjmp	.+18     	; 0x5d4 <printstr+0x18>

void printstr(const char *s)
{
  while (*s)
    {
      if (*s == '\n')
     5c2:	8a 30       	cpi	r24, 0x0A	; 10
     5c4:	19 f4       	brne	.+6      	; 0x5cc <printstr+0x10>
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     5c6:	5d 9b       	sbis	0x0b, 5	; 11
     5c8:	fe cf       	rjmp	.-4      	; 0x5c6 <printstr+0xa>
	UDR = c;
     5ca:	9c b9       	out	0x0c, r25	; 12
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     5cc:	5d 9b       	sbis	0x0b, 5	; 11
     5ce:	fe cf       	rjmp	.-4      	; 0x5cc <printstr+0x10>
{
  while (*s)
    {
      if (*s == '\n')
		putchr('\r');
      putchr(*s++);
     5d0:	31 96       	adiw	r30, 0x01	; 1
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
	UDR = c;
     5d2:	8c b9       	out	0x0c, r24	; 12
 * Send a C (NUL-terminated) string down the UART Tx.
 */

void printstr(const char *s)
{
  while (*s)
     5d4:	80 81       	ld	r24, Z
     5d6:	88 23       	and	r24, r24
     5d8:	a1 f7       	brne	.-24     	; 0x5c2 <printstr+0x6>
    {
      if (*s == '\n')
		putchr('\r');
      putchr(*s++);
    }
}
     5da:	08 95       	ret

000005dc <printstr_p>:
/*
 * Same as above, but the string is located in program memory,
 * so "lpm" instructions are needed to fetch it.
 */
void printstr_p(const char *s)
{
     5dc:	fc 01       	movw	r30, r24
  char c;

  for (c = pgm_read_byte(s); c; ++s, c = pgm_read_byte(s))
     5de:	84 91       	lpm	r24, Z+
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
	UDR = c;
     5e0:	9d e0       	ldi	r25, 0x0D	; 13
     5e2:	0a c0       	rjmp	.+20     	; 0x5f8 <printstr_p+0x1c>
{
  char c;

  for (c = pgm_read_byte(s); c; ++s, c = pgm_read_byte(s))
    {
      if (c == '\n')
     5e4:	8a 30       	cpi	r24, 0x0A	; 10
     5e6:	19 f4       	brne	.+6      	; 0x5ee <printstr_p+0x12>
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     5e8:	5d 9b       	sbis	0x0b, 5	; 11
     5ea:	fe cf       	rjmp	.-4      	; 0x5e8 <printstr_p+0xc>
	UDR = c;
     5ec:	9c b9       	out	0x0c, r25	; 12
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     5ee:	5d 9b       	sbis	0x0b, 5	; 11
     5f0:	fe cf       	rjmp	.-4      	; 0x5ee <printstr_p+0x12>
	UDR = c;
     5f2:	8c b9       	out	0x0c, r24	; 12
 */
void printstr_p(const char *s)
{
  char c;

  for (c = pgm_read_byte(s); c; ++s, c = pgm_read_byte(s))
     5f4:	31 96       	adiw	r30, 0x01	; 1
     5f6:	84 91       	lpm	r24, Z+
     5f8:	88 23       	and	r24, r24
     5fa:	a1 f7       	brne	.-24     	; 0x5e4 <printstr_p+0x8>
    {
      if (c == '\n')
			putchr('\r');
      putchr(c);
    }
}
     5fc:	08 95       	ret

000005fe <ioinit>:

/*
 * Do all the startup-time peripheral initializations.
 */
void ioinit(void)
{
     5fe:	1f 93       	push	r17
//  Reset all global variables here
	TimerBeep = 0;
     600:	10 92 9d 00 	sts	0x009D, r1
     604:	10 92 9e 00 	sts	0x009E, r1
     608:	10 92 9f 00 	sts	0x009F, r1
     60c:	10 92 a0 00 	sts	0x00A0, r1
	Urequested = 0;
     610:	10 92 a5 00 	sts	0x00A5, r1
     614:	10 92 a4 00 	sts	0x00A4, r1
	FilterRequested = 0;
     618:	10 92 b2 00 	sts	0x00B2, r1
	IsFlashing = 0;
     61c:	10 92 a6 00 	sts	0x00A6, r1
	ItWasManual = 1;
     620:	11 e0       	ldi	r17, 0x01	; 1
     622:	10 93 9c 00 	sts	0x009C, r17
	systime = 0;
     626:	10 92 ad 00 	sts	0x00AD, r1
     62a:	10 92 ae 00 	sts	0x00AE, r1
     62e:	10 92 af 00 	sts	0x00AF, r1
     632:	10 92 b0 00 	sts	0x00B0, r1
	rxbuff = 0;
     636:	10 92 ab 00 	sts	0x00AB, r1

/*  
 *	Disable external interrupts from port pins
 */
	GICR &= 0x1F; // disable INT0, Int1 and INT2
     63a:	8b b7       	in	r24, 0x3b	; 59
     63c:	8f 71       	andi	r24, 0x1F	; 31
     63e:	8b bf       	out	0x3b, r24	; 59
   * Timer 1 will be set up as a 16-bit in the normal mode (e.g. runs from 0 to 0xFFFF). 
   * OC1A and OC1B pins are disconnected.
   * The timer will run on MCU clock.
   */
  //TCCR1A = 3;
  TCCR1A = _BV(WGM10) | _BV(WGM11) ;
     640:	93 e0       	ldi	r25, 0x03	; 3
     642:	9f bd       	out	0x2f, r25	; 47
  TCCR1B = 1; //1-no prescaling; 2- clck/8; 3-clk/64; 4-clk/256; 5-clk/1024
     644:	1e bd       	out	0x2e, r17	; 46

  //OCR1A = 0x0fff;			/* set TOP value */

	TCCR0 = 2; //1-no prescaling; 2- clck/8; 3-clk/64; 4-clk/256; 5-clk/1024
     646:	22 e0       	ldi	r18, 0x02	; 2
     648:	23 bf       	out	0x33, r18	; 51
   * Enable Port D outputs: PD6 for the clock output, PD7 for the LED
   * flasher.  PD1 is UART TxD but not DDRD setting is provided for
   * that, as enabling the UART transmitter will automatically turn
   * this pin into an output.
   */
  CONTROL_DDR = _BV(CONTROL_PIN);
     64a:	80 e8       	ldi	r24, 0x80	; 128
     64c:	81 bb       	out	0x11, r24	; 17
  BEEPER_DDR = _BV(BEEPER_PIN);
     64e:	30 e2       	ldi	r19, 0x20	; 32
     650:	34 bb       	out	0x14, r19	; 20

 
 // UCSRA = _BV(U2X);		/* improves baud rate error @ F_CPU = 1 MHz */
	UCSRB = _BV(TXEN)|_BV(RXEN)|_BV(RXCIE); /* tx/rx enable, rx complete intr */
     652:	88 e9       	ldi	r24, 0x98	; 152
     654:	8a b9       	out	0x0a, r24	; 10
uart_set_baud(void)
{
   #define BAUD 115200
   #define BAUD_TOL 2
   #include <util/setbaud.h>
   UBRRH = UBRRH_VALUE;
     656:	10 bc       	out	0x20, r1	; 32
   UBRRL = UBRRL_VALUE;
     658:	80 e1       	ldi	r24, 0x10	; 16
     65a:	89 b9       	out	0x09, r24	; 9
   #if USE_2X
   UCSRA |= (1 << U2X);
     65c:	59 9a       	sbi	0x0b, 1	; 11
	
#if HAVE_ADC
	/* 
	 *Measured voltage is supplied on (PA3) ADC3 
	 */
	ADMUX = _BV(MUX0) | _BV(MUX1);
     65e:	97 b9       	out	0x07, r25	; 7
	/*
	 * Select automatic conversion on Timer1 Compare match B
	 */
	SFIOR |= _BV(ADTS2) | _BV(ADTS0);
     660:	80 b7       	in	r24, 0x30	; 48
     662:	80 6a       	ori	r24, 0xA0	; 160
     664:	80 bf       	out	0x30, r24	; 48
	
  /*
   * enable ADC, select ADC clock = F_CPU / 128 (i.e. 125 kHz)
   */
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
     666:	87 e8       	ldi	r24, 0x87	; 135
     668:	86 b9       	out	0x06, r24	; 6
#endif

// Pin configuration
//  SET_RELAY_CONFIG(Relay,         Port, Pin, ENABLE) 
	SET_RELAY_CONFIG(TargetRelayUp   ,'B' ,2   ,1  );
     66a:	8a e1       	ldi	r24, 0x1A	; 26
     66c:	80 93 b1 00 	sts	0x00B1, r24
     670:	ba 9a       	sbi	0x17, 2	; 23
	SET_RELAY_CONFIG(TargetRelayDown ,'B' ,3   ,1  );
     672:	8b e1       	ldi	r24, 0x1B	; 27
     674:	80 93 a3 00 	sts	0x00A3, r24
     678:	bb 9a       	sbi	0x17, 3	; 23
	SET_RELAY_CONFIG(FilterRelayIn   ,'B' ,0   ,1  );
     67a:	88 e1       	ldi	r24, 0x18	; 24
     67c:	80 93 aa 00 	sts	0x00AA, r24
     680:	b8 9a       	sbi	0x17, 0	; 23
	SET_RELAY_CONFIG(FilterRelayOut  ,'B' ,1   ,1  );
     682:	89 e1       	ldi	r24, 0x19	; 25
     684:	80 93 99 00 	sts	0x0099, r24
     688:	b9 9a       	sbi	0x17, 1	; 23
	SET_RELAY_CONFIG(FilterLimitIn   ,'D' ,2   ,0  );
     68a:	82 e3       	ldi	r24, 0x32	; 50
     68c:	80 93 b3 00 	sts	0x00B3, r24
	SET_RELAY_CONFIG(FilterLimitOut  ,'A' ,0   ,0  );
     690:	10 92 a1 00 	sts	0x00A1, r1
	SET_RELAY_CONFIG(TargetLimitUp   ,'A' ,1   ,0  );
     694:	10 93 a2 00 	sts	0x00A2, r17
	SET_RELAY_CONFIG(TargetLimitDown ,'A' ,2   ,0  );
     698:	20 93 b4 00 	sts	0x00B4, r18
	SET_RELAY_CONFIG(Target1Select   ,'C' ,6   ,1  );
     69c:	8e e2       	ldi	r24, 0x2E	; 46
     69e:	80 93 a7 00 	sts	0x00A7, r24
     6a2:	a6 9a       	sbi	0x14, 6	; 20
	SET_RELAY_CONFIG(Target2Select   ,'C' ,7   ,1  );
     6a4:	8f e2       	ldi	r24, 0x2F	; 47
     6a6:	80 93 ac 00 	sts	0x00AC, r24
     6aa:	a7 9a       	sbi	0x14, 7	; 20
	SET_RELAY_CONFIG(TargetActual    ,'C' ,0   ,0  );
     6ac:	30 93 b5 00 	sts	0x00B5, r19
	SET_RELAY_CONFIG(ManualAuto      ,'C' ,1   ,0  );
     6b0:	81 e2       	ldi	r24, 0x21	; 33
     6b2:	80 93 9b 00 	sts	0x009B, r24

//Set initial values
	RELAY_OFF(TargetRelayUp);
     6b6:	8a e1       	ldi	r24, 0x1A	; 26
     6b8:	0e 94 be 00 	call	0x17c	; 0x17c <RELAY_OFF>
	RELAY_OFF(TargetRelayDown);
     6bc:	80 91 a3 00 	lds	r24, 0x00A3
     6c0:	0e 94 be 00 	call	0x17c	; 0x17c <RELAY_OFF>
	RELAY_OFF(FilterRelayIn);
     6c4:	80 91 aa 00 	lds	r24, 0x00AA
     6c8:	0e 94 be 00 	call	0x17c	; 0x17c <RELAY_OFF>
	RELAY_OFF(FilterRelayOut);
     6cc:	80 91 99 00 	lds	r24, 0x0099
     6d0:	0e 94 be 00 	call	0x17c	; 0x17c <RELAY_OFF>
	RELAY_OFF(Target1Select);
     6d4:	80 91 a7 00 	lds	r24, 0x00A7
     6d8:	0e 94 be 00 	call	0x17c	; 0x17c <RELAY_OFF>
	RELAY_OFF(Target2Select);
     6dc:	80 91 ac 00 	lds	r24, 0x00AC
     6e0:	0e 94 be 00 	call	0x17c	; 0x17c <RELAY_OFF>


	TIMSK = _BV(TOIE1);			// Enable Timer1 Overflow Interrupt Enable bit
     6e4:	84 e0       	ldi	r24, 0x04	; 4
     6e6:	89 bf       	out	0x39, r24	; 57
	TIMSK |= _BV(TOIE0);		// Enable Timer0 Overflow Interrupt Enable bit
     6e8:	89 b7       	in	r24, 0x39	; 57
     6ea:	81 60       	ori	r24, 0x01	; 1
     6ec:	89 bf       	out	0x39, r24	; 57

	
	if(!IS_RELAY_ON(ManualAuto))   // We are in the Automatic mode.
     6ee:	80 91 9b 00 	lds	r24, 0x009B
     6f2:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     6f6:	88 23       	and	r24, r24
     6f8:	09 f5       	brne	.+66     	; 0x73c <ioinit+0x13e>
	{  	
		ItWasManual = 0;
     6fa:	10 92 9c 00 	sts	0x009C, r1
		TargetCurrent = IS_RELAY_ON(TargetActual);
     6fe:	80 91 b5 00 	lds	r24, 0x00B5
     702:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     706:	80 93 9a 00 	sts	0x009A, r24
		TargetRequested = TargetCurrent==0? 1 : 0;
     70a:	10 92 b7 00 	sts	0x00B7, r1
     70e:	88 23       	and	r24, r24
     710:	11 f4       	brne	.+4      	; 0x716 <ioinit+0x118>
     712:	10 93 b7 00 	sts	0x00B7, r17
		Urequested = 0;
     716:	10 92 a5 00 	sts	0x00A5, r1
     71a:	10 92 a4 00 	sts	0x00A4, r1
		FilterRequested = GET_CURRENT_FILTER - 1;
     71e:	80 91 a1 00 	lds	r24, 0x00A1
     722:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     726:	18 2f       	mov	r17, r24
     728:	80 91 b3 00 	lds	r24, 0x00B3
     72c:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     730:	11 50       	subi	r17, 0x01	; 1
     732:	88 0f       	add	r24, r24
     734:	81 0f       	add	r24, r17
     736:	80 93 b2 00 	sts	0x00B2, r24
     73a:	02 c0       	rjmp	.+4      	; 0x740 <ioinit+0x142>
	} 
	else 
	{
		ItWasManual = 1;
     73c:	10 93 9c 00 	sts	0x009C, r17
	}

	intflags.adc_int = 0;
     740:	80 91 b8 00 	lds	r24, 0x00B8
     744:	8d 7f       	andi	r24, 0xFD	; 253
     746:	80 93 b8 00 	sts	0x00B8, r24
	intflags.tmr_int = 0;
     74a:	80 91 b8 00 	lds	r24, 0x00B8
     74e:	8e 7f       	andi	r24, 0xFE	; 254
     750:	80 93 b8 00 	sts	0x00B8, r24
	intflags.rx_int  = 0;
     754:	80 91 b8 00 	lds	r24, 0x00B8
     758:	8b 7f       	andi	r24, 0xFB	; 251
     75a:	80 93 b8 00 	sts	0x00B8, r24

	sei();			/* enable interrupts */
     75e:	78 94       	sei

  /*
   * Enable the watchdog with the largest prescaler.  Will cause a
   * watchdog reset after approximately 2 s @ Vcc = 5 V
   */
  wdt_enable(WDTO_2S);
     760:	2f e0       	ldi	r18, 0x0F	; 15
     762:	88 e1       	ldi	r24, 0x18	; 24
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	a8 95       	wdr
     76c:	81 bd       	out	0x21, r24	; 33
     76e:	0f be       	out	0x3f, r0	; 63
     770:	21 bd       	out	0x21, r18	; 33
	}
	intflags.adc_int = 0;
	intflags.tmr_int = 0;
	intflags.rx_int = 0;
#endif
}
     772:	1f 91       	pop	r17
     774:	08 95       	ret

00000776 <read_uint16>:
//---------------------------------------------------------------------------

uint16_t read_uint16(uint16_t *store, uint16_t *HowMany)
{
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	8c 01       	movw	r16, r24
     780:	eb 01       	movw	r28, r22
     782:	6f ef       	ldi	r22, 0xFF	; 255
     784:	7f ef       	ldi	r23, 0xFF	; 255
     786:	a0 e0       	ldi	r26, 0x00	; 0
     788:	b0 e0       	ldi	r27, 0x00	; 0
     78a:	38 c0       	rjmp	.+112    	; 0x7fc <read_uint16+0x86>

#define MAXWAIT 1000	

	while(++cycle < MAXWAIT)
	{	
		wdt_reset();
     78c:	a8 95       	wdr
		sleep_mode();
     78e:	85 b7       	in	r24, 0x35	; 53
     790:	80 64       	ori	r24, 0x40	; 64
     792:	85 bf       	out	0x35, r24	; 53
     794:	88 95       	sleep
     796:	85 b7       	in	r24, 0x35	; 53
     798:	8f 7b       	andi	r24, 0xBF	; 191
     79a:	85 bf       	out	0x35, r24	; 53
		if(!intflags.rx_int) continue;   // ignore other interrupts
     79c:	80 91 b8 00 	lds	r24, 0x00B8
     7a0:	82 ff       	sbrs	r24, 2
     7a2:	38 c0       	rjmp	.+112    	; 0x814 <read_uint16+0x9e>
		intflags.rx_int = 0;
     7a4:	80 91 b8 00 	lds	r24, 0x00B8
     7a8:	8b 7f       	andi	r24, 0xFB	; 251
     7aa:	80 93 b8 00 	sts	0x00B8, r24
		rxc = rxbuff;						
     7ae:	40 91 ab 00 	lds	r20, 0x00AB
		if(rxc == '\n') break;
     7b2:	4a 30       	cpi	r20, 0x0A	; 10
     7b4:	a9 f1       	breq	.+106    	; 0x820 <read_uint16+0xaa>
		if((rxc >= '0') && (rxc <= '9'))
     7b6:	84 2f       	mov	r24, r20
     7b8:	80 53       	subi	r24, 0x30	; 48
     7ba:	8a 30       	cpi	r24, 0x0A	; 10
     7bc:	08 f5       	brcc	.+66     	; 0x800 <read_uint16+0x8a>
		{
			if(ind == -1) ind = 0; // trick to skip leading blanks
     7be:	8f ef       	ldi	r24, 0xFF	; 255
     7c0:	6f 3f       	cpi	r22, 0xFF	; 255
     7c2:	78 07       	cpc	r23, r24
     7c4:	11 f4       	brne	.+4      	; 0x7ca <read_uint16+0x54>
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	70 e0       	ldi	r23, 0x00	; 0
			changed = 0;
			store[ind] = store[ind]*10 + (rxc-'0');
     7ca:	fb 01       	movw	r30, r22
     7cc:	ee 0f       	add	r30, r30
     7ce:	ff 1f       	adc	r31, r31
     7d0:	e0 0f       	add	r30, r16
     7d2:	f1 1f       	adc	r31, r17
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	40 53       	subi	r20, 0x30	; 48
     7d8:	50 40       	sbci	r21, 0x00	; 0
     7da:	80 81       	ld	r24, Z
     7dc:	91 81       	ldd	r25, Z+1	; 0x01
     7de:	9c 01       	movw	r18, r24
     7e0:	22 0f       	add	r18, r18
     7e2:	33 1f       	adc	r19, r19
     7e4:	22 0f       	add	r18, r18
     7e6:	33 1f       	adc	r19, r19
     7e8:	22 0f       	add	r18, r18
     7ea:	33 1f       	adc	r19, r19
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	28 0f       	add	r18, r24
     7f2:	39 1f       	adc	r19, r25
     7f4:	42 0f       	add	r20, r18
     7f6:	53 1f       	adc	r21, r19
     7f8:	51 83       	std	Z+1, r21	; 0x01
     7fa:	40 83       	st	Z, r20
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0a c0       	rjmp	.+20     	; 0x814 <read_uint16+0x9e>
		} else if(!changed) 
     800:	99 23       	and	r25, r25
     802:	41 f4       	brne	.+16     	; 0x814 <read_uint16+0x9e>
		{
			ind++;
     804:	6f 5f       	subi	r22, 0xFF	; 255
     806:	7f 4f       	sbci	r23, 0xFF	; 255
			changed = 1;
			if(ind == *HowMany) break;
     808:	88 81       	ld	r24, Y
     80a:	99 81       	ldd	r25, Y+1	; 0x01
     80c:	68 17       	cp	r22, r24
     80e:	79 07       	cpc	r23, r25
     810:	39 f0       	breq	.+14     	; 0x820 <read_uint16+0xaa>
     812:	91 e0       	ldi	r25, 0x01	; 1
uint8_t	changed = 0;
uint8_t rxc;

#define MAXWAIT 1000	

	while(++cycle < MAXWAIT)
     814:	11 96       	adiw	r26, 0x01	; 1
     816:	83 e0       	ldi	r24, 0x03	; 3
     818:	a8 3e       	cpi	r26, 0xE8	; 232
     81a:	b8 07       	cpc	r27, r24
     81c:	09 f0       	breq	.+2      	; 0x820 <read_uint16+0xaa>
     81e:	b6 cf       	rjmp	.-148    	; 0x78c <read_uint16+0x16>
			changed = 1;
			if(ind == *HowMany) break;
		}
	}
	
	*HowMany = (ind < 0) ? 0 : ind;
     820:	fb 01       	movw	r30, r22
     822:	77 ff       	sbrs	r23, 7
     824:	02 c0       	rjmp	.+4      	; 0x82a <read_uint16+0xb4>
     826:	e0 e0       	ldi	r30, 0x00	; 0
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	f9 83       	std	Y+1, r31	; 0x01
     82c:	e8 83       	st	Y, r30
     82e:	28 ee       	ldi	r18, 0xE8	; 232
     830:	33 e0       	ldi	r19, 0x03	; 3
     832:	2a 1b       	sub	r18, r26
     834:	3b 0b       	sbc	r19, r27
	return (MAXWAIT-cycle);

}
     836:	c9 01       	movw	r24, r18
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	08 95       	ret

00000842 <scan_uint16>:
//---------------------------------------------------------------------------

int8_t scan_uint16(uint16_t *store, uint8_t HowMany, char *buf, uint8_t buflen)
{
     842:	cf 92       	push	r12
     844:	df 92       	push	r13
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	ec 01       	movw	r28, r24
     854:	6a 01       	movw	r12, r20
int8_t	ind = -1;    // trick to skip leading blanks
int8_t	cycle = -1;
uint8_t	changed = 1;
uint8_t	rxc;

	store[0] = 0;
     856:	19 82       	std	Y+1, r1	; 0x01
     858:	18 82       	st	Y, r1
     85a:	7f ef       	ldi	r23, 0xFF	; 255
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	a0 e0       	ldi	r26, 0x00	; 0
     860:	b0 e0       	ldi	r27, 0x00	; 0
	while(++cycle < buflen)
     862:	e2 2e       	mov	r14, r18
     864:	ff 24       	eor	r15, r15
			store[ind] = store[ind]*10 + (rxc-'0');
		} else if(!changed) 
		{
			ind++;
			changed = 1;
			if(ind == HowMany) break;
     866:	06 2f       	mov	r16, r22
     868:	10 e0       	ldi	r17, 0x00	; 0
     86a:	3d c0       	rjmp	.+122    	; 0x8e6 <scan_uint16+0xa4>
uint8_t	rxc;

	store[0] = 0;
	while(++cycle < buflen)
	{	
		rxc = buf[cycle];						
     86c:	f6 01       	movw	r30, r12
     86e:	ea 0f       	add	r30, r26
     870:	fb 1f       	adc	r31, r27
     872:	40 81       	ld	r20, Z
		if(rxc == ETX || rxc == EOT) break;
     874:	84 2f       	mov	r24, r20
     876:	83 50       	subi	r24, 0x03	; 3
     878:	82 30       	cpi	r24, 0x02	; 2
     87a:	c8 f1       	brcs	.+114    	; 0x8ee <scan_uint16+0xac>
		if((rxc >= '0') && (rxc <= '9'))
     87c:	8d 52       	subi	r24, 0x2D	; 45
     87e:	8a 30       	cpi	r24, 0x0A	; 10
     880:	00 f5       	brcc	.+64     	; 0x8c2 <scan_uint16+0x80>
		{
			if(ind == -1) ind = 0; // trick to skip leading blanks
     882:	7f 3f       	cpi	r23, 0xFF	; 255
     884:	09 f4       	brne	.+2      	; 0x888 <scan_uint16+0x46>
     886:	70 e0       	ldi	r23, 0x00	; 0
			changed = 0;
			store[ind] = store[ind]*10 + (rxc-'0');
     888:	e7 2f       	mov	r30, r23
     88a:	ff 27       	eor	r31, r31
     88c:	e7 fd       	sbrc	r30, 7
     88e:	f0 95       	com	r31
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	ec 0f       	add	r30, r28
     896:	fd 1f       	adc	r31, r29
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	40 53       	subi	r20, 0x30	; 48
     89c:	50 40       	sbci	r21, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	91 81       	ldd	r25, Z+1	; 0x01
     8a2:	9c 01       	movw	r18, r24
     8a4:	63 e0       	ldi	r22, 0x03	; 3
     8a6:	22 0f       	add	r18, r18
     8a8:	33 1f       	adc	r19, r19
     8aa:	6a 95       	dec	r22
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <scan_uint16+0x64>
     8ae:	88 0f       	add	r24, r24
     8b0:	99 1f       	adc	r25, r25
     8b2:	28 0f       	add	r18, r24
     8b4:	39 1f       	adc	r19, r25
     8b6:	42 0f       	add	r20, r18
     8b8:	53 1f       	adc	r21, r19
     8ba:	51 83       	std	Z+1, r21	; 0x01
     8bc:	40 83       	st	Z, r20
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	11 c0       	rjmp	.+34     	; 0x8e4 <scan_uint16+0xa2>
		} else if(!changed) 
     8c2:	99 23       	and	r25, r25
     8c4:	71 f4       	brne	.+28     	; 0x8e2 <scan_uint16+0xa0>
		{
			ind++;
     8c6:	7f 5f       	subi	r23, 0xFF	; 255
			changed = 1;
			if(ind == HowMany) break;
     8c8:	e7 2f       	mov	r30, r23
     8ca:	ff 27       	eor	r31, r31
     8cc:	e7 fd       	sbrc	r30, 7
     8ce:	f0 95       	com	r31
     8d0:	e0 17       	cp	r30, r16
     8d2:	f1 07       	cpc	r31, r17
     8d4:	61 f0       	breq	.+24     	; 0x8ee <scan_uint16+0xac>
			store[ind] = 0;
     8d6:	ee 0f       	add	r30, r30
     8d8:	ff 1f       	adc	r31, r31
     8da:	ec 0f       	add	r30, r28
     8dc:	fd 1f       	adc	r31, r29
     8de:	11 82       	std	Z+1, r1	; 0x01
     8e0:	10 82       	st	Z, r1
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	11 96       	adiw	r26, 0x01	; 1
int8_t	cycle = -1;
uint8_t	changed = 1;
uint8_t	rxc;

	store[0] = 0;
	while(++cycle < buflen)
     8e6:	ae 15       	cp	r26, r14
     8e8:	bf 05       	cpc	r27, r15
     8ea:	0c f4       	brge	.+2      	; 0x8ee <scan_uint16+0xac>
     8ec:	bf cf       	rjmp	.-130    	; 0x86c <scan_uint16+0x2a>
	}
	
//	ind = (ind < 0) ? 0 : ind;
	return ind+1;

}
     8ee:	87 2f       	mov	r24, r23
     8f0:	8f 5f       	subi	r24, 0xFF	; 255
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	08 95       	ret

00000904 <calc_crc>:
//---------------------------------------------------------------------------

uint8_t calc_crc(char* str,uint8_t len)
{
     904:	ac 01       	movw	r20, r24
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	06 c0       	rjmp	.+12     	; 0x916 <calc_crc+0x12>
//
//	Compute CRC code for a string of char
  uint8_t bcc  = 0;
  while (len) {
     bcc ^= str[--len];
     90a:	61 50       	subi	r22, 0x01	; 1
     90c:	fa 01       	movw	r30, r20
     90e:	e6 0f       	add	r30, r22
     910:	f1 1d       	adc	r31, r1
     912:	80 81       	ld	r24, Z
     914:	28 27       	eor	r18, r24
uint8_t calc_crc(char* str,uint8_t len)
{
//
//	Compute CRC code for a string of char
  uint8_t bcc  = 0;
  while (len) {
     916:	66 23       	and	r22, r22
     918:	c1 f7       	brne	.-16     	; 0x90a <calc_crc+0x6>
     bcc ^= str[--len];
//     bcc = bcc & 0x7F;  // It is only for 7 bit transmission protocol
  }
	return bcc;
}
     91a:	82 2f       	mov	r24, r18
     91c:	08 95       	ret

0000091e <read_binary>:
//---------------------------------------------------------------------------

int8_t read_binary(char *store, uint8_t *HowMany)
{
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	ec 01       	movw	r28, r24
     924:	db 01       	movw	r26, r22
     926:	28 ee       	ldi	r18, 0xE8	; 232
     928:	33 e0       	ldi	r19, 0x03	; 3
     92a:	18 c0       	rjmp	.+48     	; 0x95c <read_binary+0x3e>

// Read length of the record
	len = 0;
	while(--cycle)
	{	
		wdt_reset();
     92c:	a8 95       	wdr
		sleep_mode();
     92e:	85 b7       	in	r24, 0x35	; 53
     930:	80 64       	ori	r24, 0x40	; 64
     932:	85 bf       	out	0x35, r24	; 53
     934:	88 95       	sleep
     936:	85 b7       	in	r24, 0x35	; 53
     938:	8f 7b       	andi	r24, 0xBF	; 191
     93a:	85 bf       	out	0x35, r24	; 53
		if(!intflags.rx_int) continue;   // ignore all other interrupts
     93c:	80 91 b8 00 	lds	r24, 0x00B8
     940:	82 ff       	sbrs	r24, 2
     942:	0c c0       	rjmp	.+24     	; 0x95c <read_binary+0x3e>
		intflags.rx_int = 0;
     944:	80 91 b8 00 	lds	r24, 0x00B8
     948:	8b 7f       	andi	r24, 0xFB	; 251
     94a:	80 93 b8 00 	sts	0x00B8, r24
		len = rxbuff;
     94e:	40 91 ab 00 	lds	r20, 0x00AB
		break;
	}
	if(!len) return -1;
     952:	44 23       	and	r20, r20
     954:	09 f4       	brne	.+2      	; 0x958 <read_binary+0x3a>
     956:	80 c0       	rjmp	.+256    	; 0xa58 <read_binary+0x13a>
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	3f c0       	rjmp	.+126    	; 0x9da <read_binary+0xbc>
uint8_t len,ind;
uint16_t cycle=MAXWAIT;

// Read length of the record
	len = 0;
	while(--cycle)
     95c:	21 50       	subi	r18, 0x01	; 1
     95e:	30 40       	sbci	r19, 0x00	; 0
     960:	29 f7       	brne	.-54     	; 0x92c <read_binary+0xe>
     962:	7a c0       	rjmp	.+244    	; 0xa58 <read_binary+0x13a>
	
// Read record body
	ind = 0;
	while(--cycle)
	{	
		wdt_reset();
     964:	a8 95       	wdr
		sleep_mode();
     966:	85 b7       	in	r24, 0x35	; 53
     968:	80 64       	ori	r24, 0x40	; 64
     96a:	85 bf       	out	0x35, r24	; 53
     96c:	88 95       	sleep
     96e:	85 b7       	in	r24, 0x35	; 53
     970:	8f 7b       	andi	r24, 0xBF	; 191
     972:	85 bf       	out	0x35, r24	; 53
		if(!intflags.rx_int) continue;   // ignore all other interrupts
     974:	80 91 b8 00 	lds	r24, 0x00B8
     978:	82 ff       	sbrs	r24, 2
     97a:	2f c0       	rjmp	.+94     	; 0x9da <read_binary+0xbc>
		intflags.rx_int = 0;
     97c:	80 91 b8 00 	lds	r24, 0x00B8
     980:	8b 7f       	andi	r24, 0xFB	; 251
     982:	80 93 b8 00 	sts	0x00B8, r24
		store[ind++] = rxbuff;
     986:	80 91 ab 00 	lds	r24, 0x00AB
     98a:	fe 01       	movw	r30, r28
     98c:	e5 0f       	add	r30, r21
     98e:	f1 1d       	adc	r31, r1
     990:	80 83       	st	Z, r24
     992:	5f 5f       	subi	r21, 0xFF	; 255
		if(ind == len) break;
     994:	54 17       	cp	r21, r20
     996:	29 f1       	breq	.+74     	; 0x9e2 <read_binary+0xc4>
		if(ind == *HowMany)  {
     998:	8c 91       	ld	r24, X
     99a:	58 17       	cp	r21, r24
     99c:	f1 f4       	brne	.+60     	; 0x9da <read_binary+0xbc>
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     99e:	5d 9b       	sbis	0x0b, 5	; 11
     9a0:	fe cf       	rjmp	.-4      	; 0x99e <read_binary+0x80>
	UDR = c;
     9a2:	85 e1       	ldi	r24, 0x15	; 21
     9a4:	8c b9       	out	0x0c, r24	; 12
     9a6:	15 c0       	rjmp	.+42     	; 0x9d2 <read_binary+0xb4>
		if(ind == len) break;
		if(ind == *HowMany)  {
			putchr(NAK);
			while(--cycle)  // Skip the rest of message
			{	
				wdt_reset();
     9a8:	a8 95       	wdr
				sleep_mode();
     9aa:	85 b7       	in	r24, 0x35	; 53
     9ac:	80 64       	ori	r24, 0x40	; 64
     9ae:	85 bf       	out	0x35, r24	; 53
     9b0:	88 95       	sleep
     9b2:	85 b7       	in	r24, 0x35	; 53
     9b4:	8f 7b       	andi	r24, 0xBF	; 191
     9b6:	85 bf       	out	0x35, r24	; 53
				if(!intflags.rx_int) continue;   // ignore other interrupts
     9b8:	80 91 b8 00 	lds	r24, 0x00B8
     9bc:	82 ff       	sbrs	r24, 2
     9be:	09 c0       	rjmp	.+18     	; 0x9d2 <read_binary+0xb4>
				intflags.rx_int = 0;
     9c0:	80 91 b8 00 	lds	r24, 0x00B8
     9c4:	8b 7f       	andi	r24, 0xFB	; 251
     9c6:	80 93 b8 00 	sts	0x00B8, r24
				if(++ind == len) break;
     9ca:	5f 5f       	subi	r21, 0xFF	; 255
     9cc:	54 17       	cp	r21, r20
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <read_binary+0xb4>
     9d0:	45 c0       	rjmp	.+138    	; 0xa5c <read_binary+0x13e>
		intflags.rx_int = 0;
		store[ind++] = rxbuff;
		if(ind == len) break;
		if(ind == *HowMany)  {
			putchr(NAK);
			while(--cycle)  // Skip the rest of message
     9d2:	21 50       	subi	r18, 0x01	; 1
     9d4:	30 40       	sbci	r19, 0x00	; 0
     9d6:	41 f7       	brne	.-48     	; 0x9a8 <read_binary+0x8a>
     9d8:	41 c0       	rjmp	.+130    	; 0xa5c <read_binary+0x13e>
	}
	if(!len) return -1;
	
// Read record body
	ind = 0;
	while(--cycle)
     9da:	21 50       	subi	r18, 0x01	; 1
     9dc:	30 40       	sbci	r19, 0x00	; 0
     9de:	09 f0       	breq	.+2      	; 0x9e2 <read_binary+0xc4>
     9e0:	c1 cf       	rjmp	.-126    	; 0x964 <read_binary+0x46>
			}
			return -2;          // Insufficient buffer error
		}
	}
	
	*HowMany = ind;
     9e2:	5c 93       	st	X, r21
	if(cycle == 0) {
     9e4:	21 15       	cp	r18, r1
     9e6:	31 05       	cpc	r19, r1
     9e8:	c1 f4       	brne	.+48     	; 0xa1a <read_binary+0xfc>
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     9ea:	5d 9b       	sbis	0x0b, 5	; 11
     9ec:	fe cf       	rjmp	.-4      	; 0x9ea <read_binary+0xcc>
     9ee:	1a c0       	rjmp	.+52     	; 0xa24 <read_binary+0x106>
		return 0;
	}

 // Read the CRC byte
	while(--cycle) 	{	
		wdt_reset();
     9f0:	a8 95       	wdr
		sleep_mode();
     9f2:	85 b7       	in	r24, 0x35	; 53
     9f4:	80 64       	ori	r24, 0x40	; 64
     9f6:	85 bf       	out	0x35, r24	; 53
     9f8:	88 95       	sleep
     9fa:	85 b7       	in	r24, 0x35	; 53
     9fc:	8f 7b       	andi	r24, 0xBF	; 191
     9fe:	85 bf       	out	0x35, r24	; 53
		if(!intflags.rx_int) continue;   // ignore other interrupts
     a00:	80 91 b8 00 	lds	r24, 0x00B8
     a04:	82 ff       	sbrs	r24, 2
     a06:	09 c0       	rjmp	.+18     	; 0xa1a <read_binary+0xfc>
		intflags.rx_int = 0;
     a08:	80 91 b8 00 	lds	r24, 0x00B8
     a0c:	8b 7f       	andi	r24, 0xFB	; 251
     a0e:	80 93 b8 00 	sts	0x00B8, r24
		len = rxbuff;
     a12:	60 91 ab 00 	lds	r22, 0x00AB
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	0f c0       	rjmp	.+30     	; 0xa38 <read_binary+0x11a>
		putchr(NAK);
		return 0;
	}

 // Read the CRC byte
	while(--cycle) 	{	
     a1a:	21 50       	subi	r18, 0x01	; 1
     a1c:	30 40       	sbci	r19, 0x00	; 0
     a1e:	41 f7       	brne	.-48     	; 0x9f0 <read_binary+0xd2>
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     a20:	5d 9b       	sbis	0x0b, 5	; 11
     a22:	fe cf       	rjmp	.-4      	; 0xa20 <read_binary+0x102>
	UDR = c;
     a24:	85 e1       	ldi	r24, 0x15	; 21
     a26:	8c b9       	out	0x0c, r24	; 12
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	19 c0       	rjmp	.+50     	; 0xa5e <read_binary+0x140>
{
//
//	Compute CRC code for a string of char
  uint8_t bcc  = 0;
  while (len) {
     bcc ^= str[--len];
     a2c:	51 50       	subi	r21, 0x01	; 1
     a2e:	fe 01       	movw	r30, r28
     a30:	e5 0f       	add	r30, r21
     a32:	f1 1d       	adc	r31, r1
     a34:	80 81       	ld	r24, Z
     a36:	48 27       	eor	r20, r24
uint8_t calc_crc(char* str,uint8_t len)
{
//
//	Compute CRC code for a string of char
  uint8_t bcc  = 0;
  while (len) {
     a38:	55 23       	and	r21, r21
     a3a:	c1 f7       	brne	.-16     	; 0xa2c <read_binary+0x10e>
		putchr(NAK);
		return 0;
	}
	
// Check the CRC
	if(len == calc_crc(store,ind)) {
     a3c:	64 17       	cp	r22, r20
     a3e:	31 f4       	brne	.+12     	; 0xa4c <read_binary+0x12e>
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     a40:	5d 9b       	sbis	0x0b, 5	; 11
     a42:	fe cf       	rjmp	.-4      	; 0xa40 <read_binary+0x122>
	UDR = c;
     a44:	86 e0       	ldi	r24, 0x06	; 6
     a46:	8c b9       	out	0x0c, r24	; 12
	} else {
		putchr(NAK);
		return -3;      // Transmission error
	}

	return (cycle);
     a48:	82 2f       	mov	r24, r18
     a4a:	09 c0       	rjmp	.+18     	; 0xa5e <read_binary+0x140>
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     a4c:	5d 9b       	sbis	0x0b, 5	; 11
     a4e:	fe cf       	rjmp	.-4      	; 0xa4c <read_binary+0x12e>
	UDR = c;
     a50:	85 e1       	ldi	r24, 0x15	; 21
     a52:	8c b9       	out	0x0c, r24	; 12
     a54:	8d ef       	ldi	r24, 0xFD	; 253
     a56:	03 c0       	rjmp	.+6      	; 0xa5e <read_binary+0x140>
// Check the CRC
	if(len == calc_crc(store,ind)) {
		putchr(ACK);
	} else {
		putchr(NAK);
		return -3;      // Transmission error
     a58:	8f ef       	ldi	r24, 0xFF	; 255
     a5a:	01 c0       	rjmp	.+2      	; 0xa5e <read_binary+0x140>
     a5c:	8e ef       	ldi	r24, 0xFE	; 254
	}

	return (cycle);

}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	08 95       	ret

00000a64 <read_message>:
//---------------------------------------------------------------------------

int16_t read_message(char *store, uint8_t *HowMany)
{
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	dc 01       	movw	r26, r24
     a6a:	eb 01       	movw	r28, r22
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	50 e0       	ldi	r21, 0x00	; 0
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	9c c0       	rjmp	.+312    	; 0xbae <read_message+0x14a>

#define MAXWAIT 1000	

	while(++cycle < MAXWAIT)
	{	
		wdt_reset();
     a76:	a8 95       	wdr
		sleep_mode();
     a78:	85 b7       	in	r24, 0x35	; 53
     a7a:	80 64       	ori	r24, 0x40	; 64
     a7c:	85 bf       	out	0x35, r24	; 53
     a7e:	88 95       	sleep
     a80:	85 b7       	in	r24, 0x35	; 53
     a82:	8f 7b       	andi	r24, 0xBF	; 191
     a84:	85 bf       	out	0x35, r24	; 53
		if(!intflags.rx_int) continue;   // ignore all other interrupts
     a86:	80 91 b8 00 	lds	r24, 0x00B8
     a8a:	82 ff       	sbrs	r24, 2
     a8c:	90 c0       	rjmp	.+288    	; 0xbae <read_message+0x14a>
		intflags.rx_int = 0;
     a8e:	80 91 b8 00 	lds	r24, 0x00B8
     a92:	8b 7f       	andi	r24, 0xFB	; 251
     a94:	80 93 b8 00 	sts	0x00B8, r24
		if(rxc == EOT) {
     a98:	24 30       	cpi	r18, 0x04	; 4
     a9a:	e9 f5       	brne	.+122    	; 0xb16 <read_message+0xb2>
			rxc = rxbuff;						
     a9c:	70 91 ab 00 	lds	r23, 0x00AB
     aa0:	26 2f       	mov	r18, r22
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	06 c0       	rjmp	.+12     	; 0xab2 <read_message+0x4e>
{
//
//	Compute CRC code for a string of char
  uint8_t bcc  = 0;
  while (len) {
     bcc ^= str[--len];
     aa6:	21 50       	subi	r18, 0x01	; 1
     aa8:	fd 01       	movw	r30, r26
     aaa:	e2 0f       	add	r30, r18
     aac:	f1 1d       	adc	r31, r1
     aae:	80 81       	ld	r24, Z
     ab0:	38 27       	eor	r19, r24
uint8_t calc_crc(char* str,uint8_t len)
{
//
//	Compute CRC code for a string of char
  uint8_t bcc  = 0;
  while (len) {
     ab2:	22 23       	and	r18, r18
     ab4:	c1 f7       	brne	.-16     	; 0xaa6 <read_message+0x42>
		sleep_mode();
		if(!intflags.rx_int) continue;   // ignore all other interrupts
		intflags.rx_int = 0;
		if(rxc == EOT) {
			rxc = rxbuff;						
			if(rxc == calc_crc(store,ind)) {
     ab6:	73 17       	cp	r23, r19
     ab8:	31 f4       	brne	.+12     	; 0xac6 <read_message+0x62>
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     aba:	5d 9b       	sbis	0x0b, 5	; 11
     abc:	fe cf       	rjmp	.-4      	; 0xaba <read_message+0x56>
	UDR = c;
     abe:	86 e0       	ldi	r24, 0x06	; 6
     ac0:	8c b9       	out	0x0c, r24	; 12
		intflags.rx_int = 0;
		if(rxc == EOT) {
			rxc = rxbuff;						
			if(rxc == calc_crc(store,ind)) {
				putchr(ACK);
				*HowMany = ind;
     ac2:	68 83       	st	Y, r22
     ac4:	7b c0       	rjmp	.+246    	; 0xbbc <read_message+0x158>
				break;
			} else {
				SET_TIMER(TimerBeep, (ONE_SECOND/4));
     ac6:	80 91 9d 00 	lds	r24, 0x009D
     aca:	90 91 9e 00 	lds	r25, 0x009E
     ace:	a0 91 9f 00 	lds	r26, 0x009F
     ad2:	b0 91 a0 00 	lds	r27, 0x00A0
     ad6:	00 97       	sbiw	r24, 0x00	; 0
     ad8:	a1 05       	cpc	r26, r1
     ada:	b1 05       	cpc	r27, r1
     adc:	a1 f4       	brne	.+40     	; 0xb06 <read_message+0xa2>
     ade:	80 91 ad 00 	lds	r24, 0x00AD
     ae2:	90 91 ae 00 	lds	r25, 0x00AE
     ae6:	a0 91 af 00 	lds	r26, 0x00AF
     aea:	b0 91 b0 00 	lds	r27, 0x00B0
     aee:	8c 5c       	subi	r24, 0xCC	; 204
     af0:	97 4f       	sbci	r25, 0xF7	; 247
     af2:	af 4f       	sbci	r26, 0xFF	; 255
     af4:	bf 4f       	sbci	r27, 0xFF	; 255
     af6:	80 93 9d 00 	sts	0x009D, r24
     afa:	90 93 9e 00 	sts	0x009E, r25
     afe:	a0 93 9f 00 	sts	0x009F, r26
     b02:	b0 93 a0 00 	sts	0x00A0, r27
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     b06:	5d 9b       	sbis	0x0b, 5	; 11
     b08:	fe cf       	rjmp	.-4      	; 0xb06 <read_message+0xa2>
	UDR = c;
     b0a:	85 e1       	ldi	r24, 0x15	; 21
     b0c:	8c b9       	out	0x0c, r24	; 12
				*HowMany = ind;
				break;
			} else {
				SET_TIMER(TimerBeep, (ONE_SECOND/4));
				putchr(NAK);
				*HowMany = ind;
     b0e:	68 83       	st	Y, r22
     b10:	2f ef       	ldi	r18, 0xFF	; 255
     b12:	3f ef       	ldi	r19, 0xFF	; 255
     b14:	83 c0       	rjmp	.+262    	; 0xc1c <read_message+0x1b8>
				return -1;      // Transmission error
			}
		}
		rxc = rxbuff;						
     b16:	20 91 ab 00 	lds	r18, 0x00AB
		store[ind++] = rxc;
     b1a:	fd 01       	movw	r30, r26
     b1c:	e6 0f       	add	r30, r22
     b1e:	f1 1d       	adc	r31, r1
     b20:	20 83       	st	Z, r18
     b22:	6f 5f       	subi	r22, 0xFF	; 255
		if(ind == *HowMany)  {
     b24:	88 81       	ld	r24, Y
     b26:	68 17       	cp	r22, r24
     b28:	09 f0       	breq	.+2      	; 0xb2c <read_message+0xc8>
     b2a:	41 c0       	rjmp	.+130    	; 0xbae <read_message+0x14a>
			SET_TIMER(TimerBeep, (ONE_SECOND/4));
     b2c:	80 91 9d 00 	lds	r24, 0x009D
     b30:	90 91 9e 00 	lds	r25, 0x009E
     b34:	a0 91 9f 00 	lds	r26, 0x009F
     b38:	b0 91 a0 00 	lds	r27, 0x00A0
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	a1 05       	cpc	r26, r1
     b40:	b1 05       	cpc	r27, r1
     b42:	a1 f4       	brne	.+40     	; 0xb6c <read_message+0x108>
     b44:	80 91 ad 00 	lds	r24, 0x00AD
     b48:	90 91 ae 00 	lds	r25, 0x00AE
     b4c:	a0 91 af 00 	lds	r26, 0x00AF
     b50:	b0 91 b0 00 	lds	r27, 0x00B0
     b54:	8c 5c       	subi	r24, 0xCC	; 204
     b56:	97 4f       	sbci	r25, 0xF7	; 247
     b58:	af 4f       	sbci	r26, 0xFF	; 255
     b5a:	bf 4f       	sbci	r27, 0xFF	; 255
     b5c:	80 93 9d 00 	sts	0x009D, r24
     b60:	90 93 9e 00 	sts	0x009E, r25
     b64:	a0 93 9f 00 	sts	0x009F, r26
     b68:	b0 93 a0 00 	sts	0x00A0, r27
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     b6c:	5d 9b       	sbis	0x0b, 5	; 11
     b6e:	fe cf       	rjmp	.-4      	; 0xb6c <read_message+0x108>
	UDR = c;
     b70:	85 e1       	ldi	r24, 0x15	; 21
     b72:	8c b9       	out	0x0c, r24	; 12
     b74:	15 c0       	rjmp	.+42     	; 0xba0 <read_message+0x13c>
		if(ind == *HowMany)  {
			SET_TIMER(TimerBeep, (ONE_SECOND/4));
			putchr(NAK);
			while(++cycle < MAXWAIT)  // Skip the rest of message
			{	
				wdt_reset();
     b76:	a8 95       	wdr
				sleep_mode();
     b78:	85 b7       	in	r24, 0x35	; 53
     b7a:	80 64       	ori	r24, 0x40	; 64
     b7c:	85 bf       	out	0x35, r24	; 53
     b7e:	88 95       	sleep
     b80:	85 b7       	in	r24, 0x35	; 53
     b82:	8f 7b       	andi	r24, 0xBF	; 191
     b84:	85 bf       	out	0x35, r24	; 53
				if(!intflags.rx_int) continue;   // ignore other interrupts
     b86:	80 91 b8 00 	lds	r24, 0x00B8
     b8a:	82 ff       	sbrs	r24, 2
     b8c:	09 c0       	rjmp	.+18     	; 0xba0 <read_message+0x13c>
				intflags.rx_int = 0;
     b8e:	80 91 b8 00 	lds	r24, 0x00B8
     b92:	8b 7f       	andi	r24, 0xFB	; 251
     b94:	80 93 b8 00 	sts	0x00B8, r24
				if(rxbuff == EOT) break;
     b98:	80 91 ab 00 	lds	r24, 0x00AB
     b9c:	84 30       	cpi	r24, 0x04	; 4
     b9e:	e1 f1       	breq	.+120    	; 0xc18 <read_message+0x1b4>
		rxc = rxbuff;						
		store[ind++] = rxc;
		if(ind == *HowMany)  {
			SET_TIMER(TimerBeep, (ONE_SECOND/4));
			putchr(NAK);
			while(++cycle < MAXWAIT)  // Skip the rest of message
     ba0:	4f 5f       	subi	r20, 0xFF	; 255
     ba2:	5f 4f       	sbci	r21, 0xFF	; 255
     ba4:	83 e0       	ldi	r24, 0x03	; 3
     ba6:	48 3e       	cpi	r20, 0xE8	; 232
     ba8:	58 07       	cpc	r21, r24
     baa:	28 f3       	brcs	.-54     	; 0xb76 <read_message+0x112>
     bac:	35 c0       	rjmp	.+106    	; 0xc18 <read_message+0x1b4>
uint8_t	 ind = 0;
uint8_t  rxc = 0;

#define MAXWAIT 1000	

	while(++cycle < MAXWAIT)
     bae:	4f 5f       	subi	r20, 0xFF	; 255
     bb0:	5f 4f       	sbci	r21, 0xFF	; 255
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	48 3e       	cpi	r20, 0xE8	; 232
     bb6:	58 07       	cpc	r21, r24
     bb8:	09 f0       	breq	.+2      	; 0xbbc <read_message+0x158>
     bba:	5d cf       	rjmp	.-326    	; 0xa76 <read_message+0x12>
			}
			return -2;          // Insufficient buffer error
		}
	}
	
	*HowMany = ind;
     bbc:	68 83       	st	Y, r22
	if(MAXWAIT == cycle) {
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	48 3e       	cpi	r20, 0xE8	; 232
     bc2:	58 07       	cpc	r21, r24
     bc4:	21 f5       	brne	.+72     	; 0xc0e <read_message+0x1aa>
		SET_TIMER(TimerBeep, (ONE_SECOND/4));
     bc6:	80 91 9d 00 	lds	r24, 0x009D
     bca:	90 91 9e 00 	lds	r25, 0x009E
     bce:	a0 91 9f 00 	lds	r26, 0x009F
     bd2:	b0 91 a0 00 	lds	r27, 0x00A0
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	a1 05       	cpc	r26, r1
     bda:	b1 05       	cpc	r27, r1
     bdc:	a1 f4       	brne	.+40     	; 0xc06 <read_message+0x1a2>
     bde:	80 91 ad 00 	lds	r24, 0x00AD
     be2:	90 91 ae 00 	lds	r25, 0x00AE
     be6:	a0 91 af 00 	lds	r26, 0x00AF
     bea:	b0 91 b0 00 	lds	r27, 0x00B0
     bee:	8c 5c       	subi	r24, 0xCC	; 204
     bf0:	97 4f       	sbci	r25, 0xF7	; 247
     bf2:	af 4f       	sbci	r26, 0xFF	; 255
     bf4:	bf 4f       	sbci	r27, 0xFF	; 255
     bf6:	80 93 9d 00 	sts	0x009D, r24
     bfa:	90 93 9e 00 	sts	0x009E, r25
     bfe:	a0 93 9f 00 	sts	0x009F, r26
     c02:	b0 93 a0 00 	sts	0x00A0, r27
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     c06:	5d 9b       	sbis	0x0b, 5	; 11
     c08:	fe cf       	rjmp	.-4      	; 0xc06 <read_message+0x1a2>
	UDR = c;
     c0a:	85 e1       	ldi	r24, 0x15	; 21
     c0c:	8c b9       	out	0x0c, r24	; 12
	*HowMany = ind;
	if(MAXWAIT == cycle) {
		SET_TIMER(TimerBeep, (ONE_SECOND/4));
		putchr(NAK);
	}
	return (MAXWAIT-cycle);
     c0e:	28 ee       	ldi	r18, 0xE8	; 232
     c10:	33 e0       	ldi	r19, 0x03	; 3
     c12:	24 1b       	sub	r18, r20
     c14:	35 0b       	sbc	r19, r21
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <read_message+0x1b8>
     c18:	2e ef       	ldi	r18, 0xFE	; 254
     c1a:	3f ef       	ldi	r19, 0xFF	; 255

}
     c1c:	c9 01       	movw	r24, r18
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <write_message>:
			STR++;				\
		}						\
}

void write_message(char* Header, uint8_t *Body, uint8_t BodySize)
{// write a message to uart 
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	fc 01       	movw	r30, r24
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     c2a:	5d 9b       	sbis	0x0b, 5	; 11
     c2c:	fe cf       	rjmp	.-4      	; 0xc2a <write_message+0x6>
	UDR = c;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	8c b9       	out	0x0c, r24	; 12
// for the message format details consult the 'read_message'


	uint8_t bcc = 0; // clear the crc byte
	putchr(SOH);
	if(Header) 
     c32:	30 97       	sbiw	r30, 0x00	; 0
     c34:	11 f4       	brne	.+4      	; 0xc3a <write_message+0x16>
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0a c0       	rjmp	.+20     	; 0xc4e <write_message+0x2a>
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <write_message+0x24>
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     c3e:	5d 9b       	sbis	0x0b, 5	; 11
     c40:	fe cf       	rjmp	.-4      	; 0xc3e <write_message+0x1a>

	uint8_t bcc = 0; // clear the crc byte
	putchr(SOH);
	if(Header) 
		while(*Header) {
			PUTCHR_AND_CRC((*Header));
     c42:	98 27       	eor	r25, r24
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
	UDR = c;
     c44:	8c b9       	out	0x0c, r24	; 12
	uint8_t bcc = 0; // clear the crc byte
	putchr(SOH);
	if(Header) 
		while(*Header) {
			PUTCHR_AND_CRC((*Header));
			Header++;
     c46:	31 96       	adiw	r30, 0x01	; 1


	uint8_t bcc = 0; // clear the crc byte
	putchr(SOH);
	if(Header) 
		while(*Header) {
     c48:	80 81       	ld	r24, Z
     c4a:	88 23       	and	r24, r24
     c4c:	c1 f7       	brne	.-16     	; 0xc3e <write_message+0x1a>
			PUTCHR_AND_CRC((*Header));
			Header++;
		}
	PUTCHR_AND_CRC(STX);
     c4e:	22 e0       	ldi	r18, 0x02	; 2
     c50:	29 27       	eor	r18, r25
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     c52:	5d 9b       	sbis	0x0b, 5	; 11
     c54:	fe cf       	rjmp	.-4      	; 0xc52 <write_message+0x2e>
	UDR = c;
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	8c b9       	out	0x0c, r24	; 12
		while(*Header) {
			PUTCHR_AND_CRC((*Header));
			Header++;
		}
	PUTCHR_AND_CRC(STX);
	if(Body) {
     c5a:	61 15       	cp	r22, r1
     c5c:	71 05       	cpc	r23, r1
     c5e:	59 f1       	breq	.+86     	; 0xcb6 <write_message+0x92>
     c60:	eb 01       	movw	r28, r22
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	21 c0       	rjmp	.+66     	; 0xca8 <write_message+0x84>
		uint8_t i = 0;
		char *byteadr;
		for(i=0; i < BodySize; i++) {
			byteadr = uchar2h(*(Body+i));
     c66:	a8 81       	ld	r26, Y

char* uchar2h(uint8_t i)
{
   static char buf[3];
   const char code[16]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
   buf[1] = code[i&0xf];
     c68:	ea 2f       	mov	r30, r26
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	ef 70       	andi	r30, 0x0F	; 15
     c6e:	f0 70       	andi	r31, 0x00	; 0
     c70:	ea 57       	subi	r30, 0x7A	; 122
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	80 81       	ld	r24, Z
     c76:	80 93 97 00 	sts	0x0097, r24
   buf[0] = code[i>>4];
     c7a:	a2 95       	swap	r26
     c7c:	af 70       	andi	r26, 0x0F	; 15
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	aa 57       	subi	r26, 0x7A	; 122
     c82:	bf 4f       	sbci	r27, 0xFF	; 255
     c84:	8c 91       	ld	r24, X
     c86:	80 93 96 00 	sts	0x0096, r24
   buf[2] = 0;
     c8a:	10 92 98 00 	sts	0x0098, r1
     c8e:	e6 e9       	ldi	r30, 0x96	; 150
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	05 c0       	rjmp	.+10     	; 0xc9e <write_message+0x7a>
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     c94:	5d 9b       	sbis	0x0b, 5	; 11
     c96:	fe cf       	rjmp	.-4      	; 0xc94 <write_message+0x70>
	if(Body) {
		uint8_t i = 0;
		char *byteadr;
		for(i=0; i < BodySize; i++) {
			byteadr = uchar2h(*(Body+i));
			PUTSTR_AND_CRC(byteadr);
     c98:	28 27       	eor	r18, r24
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
	UDR = c;
     c9a:	8c b9       	out	0x0c, r24	; 12
	if(Body) {
		uint8_t i = 0;
		char *byteadr;
		for(i=0; i < BodySize; i++) {
			byteadr = uchar2h(*(Body+i));
			PUTSTR_AND_CRC(byteadr);
     c9c:	31 96       	adiw	r30, 0x01	; 1
     c9e:	80 81       	ld	r24, Z
     ca0:	88 23       	and	r24, r24
     ca2:	c1 f7       	brne	.-16     	; 0xc94 <write_message+0x70>
		}
	PUTCHR_AND_CRC(STX);
	if(Body) {
		uint8_t i = 0;
		char *byteadr;
		for(i=0; i < BodySize; i++) {
     ca4:	9f 5f       	subi	r25, 0xFF	; 255
     ca6:	21 96       	adiw	r28, 0x01	; 1
     ca8:	94 17       	cp	r25, r20
     caa:	e8 f2       	brcs	.-70     	; 0xc66 <write_message+0x42>
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     cac:	5d 9b       	sbis	0x0b, 5	; 11
     cae:	fe cf       	rjmp	.-4      	; 0xcac <write_message+0x88>
		char *byteadr;
		for(i=0; i < BodySize; i++) {
			byteadr = uchar2h(*(Body+i));
			PUTSTR_AND_CRC(byteadr);
		}
		PUTCHR_AND_CRC(ETX);
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	28 27       	eor	r18, r24
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
	UDR = c;
     cb4:	8c b9       	out	0x0c, r24	; 12
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     cb6:	5d 9b       	sbis	0x0b, 5	; 11
     cb8:	fe cf       	rjmp	.-4      	; 0xcb6 <write_message+0x92>
	UDR = c;
     cba:	84 e0       	ldi	r24, 0x04	; 4
     cbc:	8c b9       	out	0x0c, r24	; 12
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
     cbe:	5d 9b       	sbis	0x0b, 5	; 11
     cc0:	fe cf       	rjmp	.-4      	; 0xcbe <write_message+0x9a>
			byteadr = uchar2h(*(Body+i));
			PUTSTR_AND_CRC(byteadr);
		}
		PUTCHR_AND_CRC(ETX);
	}
	PUTCHR_AND_CRC(EOT);
     cc2:	84 e0       	ldi	r24, 0x04	; 4
     cc4:	28 27       	eor	r18, r24
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
	UDR = c;
     cc6:	2c b9       	out	0x0c, r18	; 12
		}
		PUTCHR_AND_CRC(ETX);
	}
	PUTCHR_AND_CRC(EOT);
	putchr(bcc);
}
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	08 95       	ret

00000cce <do_cmd>:
//---------------------------------------------------------------------------


void do_cmd(char *cmd, uint8_t lencmd)
{// parse a message and do something usefull
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	28 97       	sbiw	r28, 0x08	; 8
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	7c 01       	movw	r14, r24
     cec:	26 2f       	mov	r18, r22
uint8_t buf[6];
uint16_t *rqst;

	switch (cmd[0])
     cee:	fc 01       	movw	r30, r24
     cf0:	80 81       	ld	r24, Z
     cf2:	83 35       	cpi	r24, 0x53	; 83
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <do_cmd+0x2a>
     cf6:	7e c0       	rjmp	.+252    	; 0xdf4 <do_cmd+0x126>
     cf8:	84 35       	cpi	r24, 0x54	; 84
     cfa:	34 f4       	brge	.+12     	; 0xd08 <do_cmd+0x3a>
     cfc:	8f 33       	cpi	r24, 0x3F	; 63
     cfe:	41 f0       	breq	.+16     	; 0xd10 <do_cmd+0x42>
     d00:	81 35       	cpi	r24, 0x51	; 81
     d02:	09 f0       	breq	.+2      	; 0xd06 <do_cmd+0x38>
     d04:	2d c1       	rjmp	.+602    	; 0xf60 <do_cmd+0x292>
     d06:	71 c0       	rjmp	.+226    	; 0xdea <do_cmd+0x11c>
     d08:	83 37       	cpi	r24, 0x73	; 115
     d0a:	09 f0       	breq	.+2      	; 0xd0e <do_cmd+0x40>
     d0c:	29 c1       	rjmp	.+594    	; 0xf60 <do_cmd+0x292>
     d0e:	72 c0       	rjmp	.+228    	; 0xdf4 <do_cmd+0x126>
	{
	case EOT:	break;
	case '?':		// report current relay status and target position
		cmd[0] = IS_RELAY_ON(FilterLimitOut) + 2*IS_RELAY_ON(FilterLimitIn); // 0 - unknown, 1 - out, 2 - in, 3 - crazy
     d10:	80 91 a1 00 	lds	r24, 0x00A1
     d14:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     d18:	18 2f       	mov	r17, r24
     d1a:	80 91 b3 00 	lds	r24, 0x00B3
     d1e:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     d22:	88 0f       	add	r24, r24
     d24:	81 0f       	add	r24, r17
     d26:	f7 01       	movw	r30, r14
     d28:	80 83       	st	Z, r24
		cmd[1] = IS_RELAY_ON(TargetActual); // Target numbers are 0 or 1
     d2a:	80 91 b5 00 	lds	r24, 0x00B5
     d2e:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     d32:	f7 01       	movw	r30, r14
     d34:	81 83       	std	Z+1, r24	; 0x01
		uint16_t Tpos = Uadc; // Save current target position in local variable.
     d36:	80 91 a8 00 	lds	r24, 0x00A8
     d3a:	90 91 a9 00 	lds	r25, 0x00A9
     d3e:	9a 83       	std	Y+2, r25	; 0x02
     d40:	89 83       	std	Y+1, r24	; 0x01
		cmd[2] = *(((char *)&Tpos)+1); // MSB goes first
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	82 83       	std	Z+2, r24	; 0x02
		cmd[3] = *((char *)&Tpos);      // LSB goes last
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	83 83       	std	Z+3, r24	; 0x03
		cmd[4] = 3 - (IS_RELAY_ON(TargetRelayDown) + 2*IS_RELAY_ON(TargetRelayUp)); // 0 - OK, 1 - down, 2 - up, 3 - crazy
     d4a:	80 91 b1 00 	lds	r24, 0x00B1
     d4e:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     d52:	08 2f       	mov	r16, r24
     d54:	80 91 a3 00 	lds	r24, 0x00A3
     d58:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     d5c:	13 e0       	ldi	r17, 0x03	; 3
     d5e:	21 2f       	mov	r18, r17
     d60:	28 1b       	sub	r18, r24
     d62:	80 2f       	mov	r24, r16
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	28 1b       	sub	r18, r24
     d6c:	f7 01       	movw	r30, r14
     d6e:	24 83       	std	Z+4, r18	; 0x04
		cmd[5] = 3 - (IS_RELAY_ON(FilterRelayIn) + 2*IS_RELAY_ON(FilterRelayOut)); // 0 - OK, 1 - 1, 2 - 2, 3 - crazy
     d70:	80 91 99 00 	lds	r24, 0x0099
     d74:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     d78:	08 2f       	mov	r16, r24
     d7a:	80 91 aa 00 	lds	r24, 0x00AA
     d7e:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     d82:	21 2f       	mov	r18, r17
     d84:	28 1b       	sub	r18, r24
     d86:	80 2f       	mov	r24, r16
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	28 1b       	sub	r18, r24
     d90:	f7 01       	movw	r30, r14
     d92:	25 83       	std	Z+5, r18	; 0x05
		cmd[6] = IS_RELAY_ON(TargetLimitDown) + 2*IS_RELAY_ON(TargetLimitUp); // 0 - OK, 1 - out, 2 - in, 3 - crazy
     d94:	80 91 b4 00 	lds	r24, 0x00B4
     d98:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     d9c:	08 2f       	mov	r16, r24
     d9e:	80 91 a2 00 	lds	r24, 0x00A2
     da2:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     da6:	88 0f       	add	r24, r24
     da8:	80 0f       	add	r24, r16
     daa:	f7 01       	movw	r30, r14
     dac:	86 83       	std	Z+6, r24	; 0x06
		cmd[7] = 3 - (IS_RELAY_ON(Target1Select) + 2*IS_RELAY_ON(Target2Select)); // 0 - OK, 1 - 1, 2 - 2, 3 - crazy
     dae:	80 91 ac 00 	lds	r24, 0x00AC
     db2:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     db6:	08 2f       	mov	r16, r24
     db8:	80 91 a7 00 	lds	r24, 0x00A7
     dbc:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     dc0:	18 1b       	sub	r17, r24
     dc2:	80 2f       	mov	r24, r16
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	18 1b       	sub	r17, r24
     dcc:	f7 01       	movw	r30, r14
     dce:	17 83       	std	Z+7, r17	; 0x07
		cmd[8] = IS_RELAY_ON(ManualAuto);
     dd0:	80 91 9b 00 	lds	r24, 0x009B
     dd4:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     dd8:	f7 01       	movw	r30, r14
     dda:	80 87       	std	Z+8, r24	; 0x08
		write_message("STATUS",cmd,9);
     ddc:	80 e6       	ldi	r24, 0x60	; 96
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	b7 01       	movw	r22, r14
     de2:	49 e0       	ldi	r20, 0x09	; 9
     de4:	0e 94 12 06 	call	0xc24	; 0xc24 <write_message>
     de8:	bb c0       	rjmp	.+374    	; 0xf60 <do_cmd+0x292>
	break;
	case 'Q':		// 	response to automatic device identification query
					// 	PLEASE note that it is a plain text and not the standart 
					//	message format
		printstr_p(PSTR("SPINU70"));
     dea:	80 eb       	ldi	r24, 0xB0	; 176
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 ee 02 	call	0x5dc	; 0x5dc <printstr_p>
     df2:	b6 c0       	rjmp	.+364    	; 0xf60 <do_cmd+0x292>
	break;
	case 's':
	case 'S':      // Set new values for target number, target position and filter 
		rqst = (uint16_t *) buf;
     df4:	8e 01       	movw	r16, r28
     df6:	0d 5f       	subi	r16, 0xFD	; 253
     df8:	1f 4f       	sbci	r17, 0xFF	; 255
		if(!scan_uint16(rqst,3,cmd+2,lencmd-3)) {
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	e8 0e       	add	r14, r24
     e00:	f9 1e       	adc	r15, r25
     e02:	23 50       	subi	r18, 0x03	; 3
     e04:	c8 01       	movw	r24, r16
     e06:	63 e0       	ldi	r22, 0x03	; 3
     e08:	a7 01       	movw	r20, r14
     e0a:	0e 94 21 04 	call	0x842	; 0x842 <scan_uint16>
     e0e:	88 23       	and	r24, r24
     e10:	21 f4       	brne	.+8      	; 0xe1a <do_cmd+0x14c>
			printstr_p("Failed to read new values\n");
     e12:	87 e6       	ldi	r24, 0x67	; 103
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 ee 02 	call	0x5dc	; 0x5dc <printstr_p>
		}
		FilterRequested = (uint8_t) rqst[0];
     e1a:	f8 01       	movw	r30, r16
     e1c:	80 81       	ld	r24, Z
     e1e:	80 93 b2 00 	sts	0x00B2, r24
		TargetRequested = (uint8_t) rqst[1];
     e22:	82 81       	ldd	r24, Z+2	; 0x02
     e24:	80 93 b7 00 	sts	0x00B7, r24
		Urequested = rqst[2];
     e28:	84 81       	ldd	r24, Z+4	; 0x04
     e2a:	95 81       	ldd	r25, Z+5	; 0x05
     e2c:	90 93 a5 00 	sts	0x00A5, r25
     e30:	80 93 a4 00 	sts	0x00A4, r24
// Do some checks of the requested values
		FilterCurrent = IS_RELAY_ON(FilterLimitOut) + 2*IS_RELAY_ON(FilterLimitIn); // 0 - unknown, 1 - out, 2 - in, 3 - crazy
     e34:	80 91 a1 00 	lds	r24, 0x00A1
     e38:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     e3c:	18 2f       	mov	r17, r24
     e3e:	80 91 b3 00 	lds	r24, 0x00B3
     e42:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     e46:	88 0f       	add	r24, r24
     e48:	81 0f       	add	r24, r17
     e4a:	80 93 b6 00 	sts	0x00B6, r24
		TargetCurrent = IS_RELAY_ON(TargetActual);
     e4e:	80 91 b5 00 	lds	r24, 0x00B5
     e52:	0e 94 01 01 	call	0x202	; 0x202 <IS_RELAY_ON>
     e56:	38 2f       	mov	r19, r24
     e58:	80 93 9a 00 	sts	0x009A, r24
		if(FilterCurrent < 3 && FilterRequested > 1)
     e5c:	20 91 b6 00 	lds	r18, 0x00B6
     e60:	23 30       	cpi	r18, 0x03	; 3
     e62:	30 f5       	brcc	.+76     	; 0xeb0 <do_cmd+0x1e2>
     e64:	80 91 b2 00 	lds	r24, 0x00B2
     e68:	82 30       	cpi	r24, 0x02	; 2
     e6a:	10 f1       	brcs	.+68     	; 0xeb0 <do_cmd+0x1e2>
		{
			SET_TIMER(TimerBeep, (ONE_SECOND/4));
     e6c:	80 91 9d 00 	lds	r24, 0x009D
     e70:	90 91 9e 00 	lds	r25, 0x009E
     e74:	a0 91 9f 00 	lds	r26, 0x009F
     e78:	b0 91 a0 00 	lds	r27, 0x00A0
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	a1 05       	cpc	r26, r1
     e80:	b1 05       	cpc	r27, r1
     e82:	a1 f4       	brne	.+40     	; 0xeac <do_cmd+0x1de>
     e84:	80 91 ad 00 	lds	r24, 0x00AD
     e88:	90 91 ae 00 	lds	r25, 0x00AE
     e8c:	a0 91 af 00 	lds	r26, 0x00AF
     e90:	b0 91 b0 00 	lds	r27, 0x00B0
     e94:	8c 5c       	subi	r24, 0xCC	; 204
     e96:	97 4f       	sbci	r25, 0xF7	; 247
     e98:	af 4f       	sbci	r26, 0xFF	; 255
     e9a:	bf 4f       	sbci	r27, 0xFF	; 255
     e9c:	80 93 9d 00 	sts	0x009D, r24
     ea0:	90 93 9e 00 	sts	0x009E, r25
     ea4:	a0 93 9f 00 	sts	0x009F, r26
     ea8:	b0 93 a0 00 	sts	0x00A0, r27
			FilterRequested = FilterCurrent;
     eac:	20 93 b2 00 	sts	0x00B2, r18
		}
		if(TargetRequested > 1)
     eb0:	80 91 b7 00 	lds	r24, 0x00B7
     eb4:	82 30       	cpi	r24, 0x02	; 2
     eb6:	10 f1       	brcs	.+68     	; 0xefc <do_cmd+0x22e>
		{
			SET_TIMER(TimerBeep, (ONE_SECOND/4));
     eb8:	80 91 9d 00 	lds	r24, 0x009D
     ebc:	90 91 9e 00 	lds	r25, 0x009E
     ec0:	a0 91 9f 00 	lds	r26, 0x009F
     ec4:	b0 91 a0 00 	lds	r27, 0x00A0
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	a1 05       	cpc	r26, r1
     ecc:	b1 05       	cpc	r27, r1
     ece:	a1 f4       	brne	.+40     	; 0xef8 <do_cmd+0x22a>
     ed0:	80 91 ad 00 	lds	r24, 0x00AD
     ed4:	90 91 ae 00 	lds	r25, 0x00AE
     ed8:	a0 91 af 00 	lds	r26, 0x00AF
     edc:	b0 91 b0 00 	lds	r27, 0x00B0
     ee0:	8c 5c       	subi	r24, 0xCC	; 204
     ee2:	97 4f       	sbci	r25, 0xF7	; 247
     ee4:	af 4f       	sbci	r26, 0xFF	; 255
     ee6:	bf 4f       	sbci	r27, 0xFF	; 255
     ee8:	80 93 9d 00 	sts	0x009D, r24
     eec:	90 93 9e 00 	sts	0x009E, r25
     ef0:	a0 93 9f 00 	sts	0x009F, r26
     ef4:	b0 93 a0 00 	sts	0x00A0, r27
			TargetRequested = TargetCurrent;
     ef8:	30 93 b7 00 	sts	0x00B7, r19
		}
		if(Urequested > 1023)
     efc:	80 91 a4 00 	lds	r24, 0x00A4
     f00:	90 91 a5 00 	lds	r25, 0x00A5
     f04:	80 50       	subi	r24, 0x00	; 0
     f06:	94 40       	sbci	r25, 0x04	; 4
     f08:	40 f1       	brcs	.+80     	; 0xf5a <do_cmd+0x28c>
		{
			SET_TIMER(TimerBeep, (ONE_SECOND/4));
     f0a:	80 91 9d 00 	lds	r24, 0x009D
     f0e:	90 91 9e 00 	lds	r25, 0x009E
     f12:	a0 91 9f 00 	lds	r26, 0x009F
     f16:	b0 91 a0 00 	lds	r27, 0x00A0
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	a1 05       	cpc	r26, r1
     f1e:	b1 05       	cpc	r27, r1
     f20:	a1 f4       	brne	.+40     	; 0xf4a <do_cmd+0x27c>
     f22:	80 91 ad 00 	lds	r24, 0x00AD
     f26:	90 91 ae 00 	lds	r25, 0x00AE
     f2a:	a0 91 af 00 	lds	r26, 0x00AF
     f2e:	b0 91 b0 00 	lds	r27, 0x00B0
     f32:	8c 5c       	subi	r24, 0xCC	; 204
     f34:	97 4f       	sbci	r25, 0xF7	; 247
     f36:	af 4f       	sbci	r26, 0xFF	; 255
     f38:	bf 4f       	sbci	r27, 0xFF	; 255
     f3a:	80 93 9d 00 	sts	0x009D, r24
     f3e:	90 93 9e 00 	sts	0x009E, r25
     f42:	a0 93 9f 00 	sts	0x009F, r26
     f46:	b0 93 a0 00 	sts	0x00A0, r27
			Urequested = Uadc;
     f4a:	80 91 a8 00 	lds	r24, 0x00A8
     f4e:	90 91 a9 00 	lds	r25, 0x00A9
     f52:	90 93 a5 00 	sts	0x00A5, r25
     f56:	80 93 a4 00 	sts	0x00A4, r24
		}
		IsFlashing = 1;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	80 93 a6 00 	sts	0x00A6, r24
	break;
	default: break;
	}

}
     f60:	28 96       	adiw	r28, 0x08	; 8
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	08 95       	ret

00000f7a <main>:

#define CBUFSIZE	20

int
main(void)
{
     f7a:	8f 92       	push	r8
     f7c:	9f 92       	push	r9
     f7e:	af 92       	push	r10
     f80:	bf 92       	push	r11
     f82:	cf 92       	push	r12
     f84:	df 92       	push	r13
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	65 97       	sbiw	r28, 0x15	; 21
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
  char cbuf[CBUFSIZE];
  int8_t i;
  uint8_t uc;
  
  ioinit();
     fa2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <ioinit>
			/*
			* Our periodic 10 ms interrupt happened.  See what we can
			* do about it.
			*/
			intflags.tmr_int = 0;
			REFRESH_TIMER(TimerBeep);
     fa6:	ee 24       	eor	r14, r14
     fa8:	ea 94       	dec	r14
     faa:	fe 2c       	mov	r15, r14
     fac:	87 01       	movw	r16, r14
			if(uc != SOH) {
				SET_TIMER(TimerBeep, (ONE_SECOND/4));
				putchr(NAK);  // Skip until SOH 
				continue;
			}
			uc = sizeof(cbuf);
     fae:	74 e1       	ldi	r23, 0x14	; 20
     fb0:	87 2e       	mov	r8, r23
			i = read_message(cbuf,&uc);
     fb2:	62 e0       	ldi	r22, 0x02	; 2
     fb4:	c6 2e       	mov	r12, r22
     fb6:	d1 2c       	mov	r13, r1
     fb8:	cc 0e       	add	r12, r28
     fba:	dd 1e       	adc	r13, r29
     fbc:	5e 01       	movw	r10, r28
     fbe:	08 94       	sec
     fc0:	a1 1c       	adc	r10, r1
     fc2:	b1 1c       	adc	r11, r1
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
	UDR = c;
     fc4:	55 e1       	ldi	r21, 0x15	; 21
     fc6:	95 2e       	mov	r9, r21
		  "\n"));
#endif

  for (;;)
	{
      wdt_reset();
     fc8:	a8 95       	wdr

      if (intflags.tmr_int)
     fca:	80 91 b8 00 	lds	r24, 0x00B8
     fce:	80 ff       	sbrs	r24, 0
     fd0:	34 c0       	rjmp	.+104    	; 0x103a <main+0xc0>
		{
			/*
			* Our periodic 10 ms interrupt happened.  See what we can
			* do about it.
			*/
			intflags.tmr_int = 0;
     fd2:	80 91 b8 00 	lds	r24, 0x00B8
     fd6:	8e 7f       	andi	r24, 0xFE	; 254
     fd8:	80 93 b8 00 	sts	0x00B8, r24
			REFRESH_TIMER(TimerBeep);
     fdc:	20 91 9d 00 	lds	r18, 0x009D
     fe0:	30 91 9e 00 	lds	r19, 0x009E
     fe4:	40 91 9f 00 	lds	r20, 0x009F
     fe8:	50 91 a0 00 	lds	r21, 0x00A0
     fec:	21 15       	cp	r18, r1
     fee:	31 05       	cpc	r19, r1
     ff0:	41 05       	cpc	r20, r1
     ff2:	51 05       	cpc	r21, r1
     ff4:	a9 f0       	breq	.+42     	; 0x1020 <main+0xa6>
     ff6:	80 91 ad 00 	lds	r24, 0x00AD
     ffa:	90 91 ae 00 	lds	r25, 0x00AE
     ffe:	a0 91 af 00 	lds	r26, 0x00AF
    1002:	b0 91 b0 00 	lds	r27, 0x00B0
    1006:	28 17       	cp	r18, r24
    1008:	39 07       	cpc	r19, r25
    100a:	4a 07       	cpc	r20, r26
    100c:	5b 07       	cpc	r21, r27
    100e:	40 f4       	brcc	.+16     	; 0x1020 <main+0xa6>
    1010:	e0 92 9d 00 	sts	0x009D, r14
    1014:	f0 92 9e 00 	sts	0x009E, r15
    1018:	00 93 9f 00 	sts	0x009F, r16
    101c:	10 93 a0 00 	sts	0x00A0, r17

			if(!IsFlashing) {
    1020:	80 91 a6 00 	lds	r24, 0x00A6
    1024:	88 23       	and	r24, r24
    1026:	11 f4       	brne	.+4      	; 0x102c <main+0xb2>
				// Switch off LED on PD7
				CONTROL_PORT &= ~_BV(CONTROL_PIN);
    1028:	97 98       	cbi	0x12, 7	; 18
    102a:	03 c0       	rjmp	.+6      	; 0x1032 <main+0xb8>
			} else {
			// Toggle flash LED on PD7
				CONTROL_PORT ^= _BV(CONTROL_PIN);
    102c:	82 b3       	in	r24, 0x12	; 18
    102e:	80 58       	subi	r24, 0x80	; 128
    1030:	82 bb       	out	0x12, r24	; 18
			}
			Algorithm();	//  It is the main job of the whole project.
    1032:	0e 94 20 01 	call	0x240	; 0x240 <Algorithm>
#if HAVE_ADC
		  /*
		   * Enable next conversion.
		   */
			ADCSRA |= _BV(ADIE);
    1036:	33 9a       	sbi	0x06, 3	; 6
// start the conversion cycle
			ADCSRA |= _BV(ADSC);   
    1038:	36 9a       	sbi	0x06, 6	; 6
#endif
			//continue;  // Other interrupts may occure 
		}
#if HAVE_ADC
      if (intflags.adc_int)
    103a:	80 91 b8 00 	lds	r24, 0x00B8
    103e:	81 ff       	sbrs	r24, 1
    1040:	05 c0       	rjmp	.+10     	; 0x104c <main+0xd2>
		{
			intflags.adc_int = 0;
    1042:	80 91 b8 00 	lds	r24, 0x00B8
    1046:	8d 7f       	andi	r24, 0xFD	; 253
    1048:	80 93 b8 00 	sts	0x00B8, r24
			//continue;  // Other interrupts may occure 
		}
#endif /* HAVE_ADC */

      if (intflags.rx_int)
    104c:	80 91 b8 00 	lds	r24, 0x00B8
    1050:	82 ff       	sbrs	r24, 2
    1052:	7b c0       	rjmp	.+246    	; 0x114a <main+0x1d0>
		{
			intflags.rx_int = 0;
    1054:	80 91 b8 00 	lds	r24, 0x00B8
    1058:	8b 7f       	andi	r24, 0xFB	; 251
    105a:	80 93 b8 00 	sts	0x00B8, r24
			uc = rxbuff;
    105e:	80 91 ab 00 	lds	r24, 0x00AB
    1062:	89 83       	std	Y+1, r24	; 0x01
			if(uc != SOH) {
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	21 f1       	breq	.+72     	; 0x10b0 <main+0x136>
				SET_TIMER(TimerBeep, (ONE_SECOND/4));
    1068:	80 91 9d 00 	lds	r24, 0x009D
    106c:	90 91 9e 00 	lds	r25, 0x009E
    1070:	a0 91 9f 00 	lds	r26, 0x009F
    1074:	b0 91 a0 00 	lds	r27, 0x00A0
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	a1 05       	cpc	r26, r1
    107c:	b1 05       	cpc	r27, r1
    107e:	a1 f4       	brne	.+40     	; 0x10a8 <main+0x12e>
    1080:	80 91 ad 00 	lds	r24, 0x00AD
    1084:	90 91 ae 00 	lds	r25, 0x00AE
    1088:	a0 91 af 00 	lds	r26, 0x00AF
    108c:	b0 91 b0 00 	lds	r27, 0x00B0
    1090:	8c 5c       	subi	r24, 0xCC	; 204
    1092:	97 4f       	sbci	r25, 0xF7	; 247
    1094:	af 4f       	sbci	r26, 0xFF	; 255
    1096:	bf 4f       	sbci	r27, 0xFF	; 255
    1098:	80 93 9d 00 	sts	0x009D, r24
    109c:	90 93 9e 00 	sts	0x009E, r25
    10a0:	a0 93 9f 00 	sts	0x009F, r26
    10a4:	b0 93 a0 00 	sts	0x00A0, r27
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
void putchr(uint8_t c)
{
	loop_until_bit_is_set(UCSRA, UDRE);
    10a8:	5d 9b       	sbis	0x0b, 5	; 11
    10aa:	fe cf       	rjmp	.-4      	; 0x10a8 <main+0x12e>
	UDR = c;
    10ac:	9c b8       	out	0x0c, r9	; 12
    10ae:	8c cf       	rjmp	.-232    	; 0xfc8 <main+0x4e>
			if(uc != SOH) {
				SET_TIMER(TimerBeep, (ONE_SECOND/4));
				putchr(NAK);  // Skip until SOH 
				continue;
			}
			uc = sizeof(cbuf);
    10b0:	89 82       	std	Y+1, r8	; 0x01
			i = read_message(cbuf,&uc);
    10b2:	c6 01       	movw	r24, r12
    10b4:	b5 01       	movw	r22, r10
    10b6:	0e 94 32 05 	call	0xa64	; 0xa64 <read_message>
    10ba:	98 2f       	mov	r25, r24
			intflags.rx_int  = 0;
    10bc:	80 91 b8 00 	lds	r24, 0x00B8
    10c0:	8b 7f       	andi	r24, 0xFB	; 251
    10c2:	80 93 b8 00 	sts	0x00B8, r24
			intflags.adc_int = 0;
    10c6:	80 91 b8 00 	lds	r24, 0x00B8
    10ca:	8d 7f       	andi	r24, 0xFD	; 253
    10cc:	80 93 b8 00 	sts	0x00B8, r24
			intflags.tmr_int = 0;
    10d0:	80 91 b8 00 	lds	r24, 0x00B8
    10d4:	8e 7f       	andi	r24, 0xFE	; 254
    10d6:	80 93 b8 00 	sts	0x00B8, r24
			switch (i) {
    10da:	9f 3f       	cpi	r25, 0xFF	; 255
    10dc:	41 f0       	breq	.+16     	; 0x10ee <main+0x174>
    10de:	99 23       	and	r25, r25
    10e0:	19 f0       	breq	.+6      	; 0x10e8 <main+0x16e>
    10e2:	9e 3f       	cpi	r25, 0xFE	; 254
    10e4:	69 f5       	brne	.+90     	; 0x1140 <main+0x1c6>
    10e6:	06 c0       	rjmp	.+12     	; 0x10f4 <main+0x17a>
			case 0: 
				printstr_p(PSTR("\nToo many stray interrupts. Message is not read\n"));
    10e8:	8f e7       	ldi	r24, 0x7F	; 127
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	05 c0       	rjmp	.+10     	; 0x10f8 <main+0x17e>
				SET_TIMER(TimerBeep, ONE_SECOND);
			break;
			case -1:
				printstr_p(PSTR("\nTransmission error\n"));
    10ee:	8a e6       	ldi	r24, 0x6A	; 106
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <main+0x17e>
				SET_TIMER(TimerBeep, ONE_SECOND);
			break;
			case -2:
				printstr_p(PSTR("\nMessage is too long\n"));
    10f4:	84 e5       	ldi	r24, 0x54	; 84
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 ee 02 	call	0x5dc	; 0x5dc <printstr_p>
				SET_TIMER(TimerBeep, ONE_SECOND);
    10fc:	80 91 9d 00 	lds	r24, 0x009D
    1100:	90 91 9e 00 	lds	r25, 0x009E
    1104:	a0 91 9f 00 	lds	r26, 0x009F
    1108:	b0 91 a0 00 	lds	r27, 0x00A0
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	a1 05       	cpc	r26, r1
    1110:	b1 05       	cpc	r27, r1
    1112:	09 f0       	breq	.+2      	; 0x1116 <main+0x19c>
    1114:	59 cf       	rjmp	.-334    	; 0xfc8 <main+0x4e>
    1116:	80 91 ad 00 	lds	r24, 0x00AD
    111a:	90 91 ae 00 	lds	r25, 0x00AE
    111e:	a0 91 af 00 	lds	r26, 0x00AF
    1122:	b0 91 b0 00 	lds	r27, 0x00B0
    1126:	80 53       	subi	r24, 0x30	; 48
    1128:	9f 4d       	sbci	r25, 0xDF	; 223
    112a:	af 4f       	sbci	r26, 0xFF	; 255
    112c:	bf 4f       	sbci	r27, 0xFF	; 255
    112e:	80 93 9d 00 	sts	0x009D, r24
    1132:	90 93 9e 00 	sts	0x009E, r25
    1136:	a0 93 9f 00 	sts	0x009F, r26
    113a:	b0 93 a0 00 	sts	0x00A0, r27
    113e:	44 cf       	rjmp	.-376    	; 0xfc8 <main+0x4e>
			break;
			default: 
				//Parse the message and do something usefull here
				do_cmd(cbuf,uc);
    1140:	c6 01       	movw	r24, r12
    1142:	69 81       	ldd	r22, Y+1	; 0x01
    1144:	0e 94 67 06 	call	0xcce	; 0xcce <do_cmd>
    1148:	3f cf       	rjmp	.-386    	; 0xfc8 <main+0x4e>
				// The recovery is (should be) the inherent property of 
				// the algorithm itself. :) 
			continue;	// Let us see what we have in reality ;-)
		}
	
      sleep_mode();
    114a:	85 b7       	in	r24, 0x35	; 53
    114c:	80 64       	ori	r24, 0x40	; 64
    114e:	85 bf       	out	0x35, r24	; 53
    1150:	88 95       	sleep
    1152:	85 b7       	in	r24, 0x35	; 53
    1154:	8f 7b       	andi	r24, 0xBF	; 191
    1156:	85 bf       	out	0x35, r24	; 53
    1158:	37 cf       	rjmp	.-402    	; 0xfc8 <main+0x4e>

0000115a <_exit>:
    115a:	f8 94       	cli

0000115c <__stop_program>:
    115c:	ff cf       	rjmp	.-2      	; 0x115c <__stop_program>
